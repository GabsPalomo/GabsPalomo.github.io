[
  {
    "objectID": "workshops.html",
    "href": "workshops.html",
    "title": "Workshops",
    "section": "",
    "text": "Presentations/Workshops\nI’m including here a list of my presentations or workshops (English or Spanish). All material is protected under Creative Commons CC-BY-NC 4.0."
  },
  {
    "objectID": "workshops/data_manipulation_2024/index.html",
    "href": "workshops/data_manipulation_2024/index.html",
    "title": "Data Manipulation in R using the Tidyverse",
    "section": "",
    "text": "Here are the slides embedded:\n\n\nAnd here is a link to the slides"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#instructors",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#instructors",
    "title": "Introduction to ggplot2",
    "section": "Instructors",
    "text": "Instructors\n\n\nGabriela Palomo gabriella.palomo@gmail.com\n\n\nDan Herrera\nherrerawildlife@gmail.com"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#learning-objectives",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#learning-objectives",
    "title": "Introduction to ggplot2",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter today’s lecture, you’ll be able to:\n\nUnderstand the basic syntax of ggplot.\nCreate basic plots: bar, points, lines, boxplots, error bars, etc.\nCreate color palettes and use colors effectively: qualitative, sequential, and diverging palettes.\nCustomize the theme of a plot."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#grammar-of-graphics",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#grammar-of-graphics",
    "title": "Introduction to ggplot2",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\n\n\n\n“ggplot2: elegant graphics for data analysis”\n\n\n\n\n\n\n\n\ngglot2 is an R package for creating graphics.\nCreated by Hadley Wickham and is considered to be part of the tidyverse.\nCompose graphs by combining independent components: versatile!\nIf you learn the grammar then you will end up creating better graphics in less time."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#data-structure",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#data-structure",
    "title": "Introduction to ggplot2",
    "section": "Data structure",
    "text": "Data structure\n\n\n\nWide format\n\n\n\n\n\n\n\n\n\nspecies\n2007\n2008\n2009\n\n\n\n\nAdelie\n3750\nNA\nNA\n\n\nAdelie\n3800\nNA\nNA\n\n\nAdelie\n3250\nNA\nNA\n\n\nAdelie\nNA\nNA\nNA\n\n\nAdelie\n3450\nNA\nNA\n\n\nAdelie\n3650\nNA\nNA\n\n\nAdelie\n3625\nNA\nNA\n\n\nAdelie\n4675\nNA\nNA\n\n\nAdelie\n3475\nNA\nNA\n\n\nAdelie\n4250\nNA\nNA\n\n\n\n\n\n\n\n\n\nLong format\n\n\n\n\n\n\n\n\n\nspecies\nyear\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\n2007\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n\n\nAdelie\n2007\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n\n\nAdelie\n2007\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n\n\nAdelie\n2007\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nAdelie\n2007\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n\n\nAdelie\n2007\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n\n\nAdelie\n2007\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n\n\nAdelie\n2007\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n\n\nAdelie\n2007\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n\n\nAdelie\n2007\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n\n\n\n\n\n\n\n\n\n\n\nLong format data.\nEach row is an observation point and each column is a variable.\nData wrangle BEFORE you graph: tidyr::pivot_longer()"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#mapping-components",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#mapping-components",
    "title": "Introduction to ggplot2",
    "section": "Mapping components",
    "text": "Mapping components\n\n\n6 main building blocks, each with their own arguments.\n\n\n\n\n\n\n\n\nggplot(data = data, mapping = aes(x = x, y = y)) +\n  geom_*( ) + # geometries: e.g., geom_point(), geom_bar(), ...\n  coord_*( ) + \n  facet_*( ) + # dividing your data into facets: facet_grid() and facet_wrap()\n  scale_*( ) + # controls visual values: colors, fills, shapes. E.g., scale_manual().\n  theme_*( )   # Controls the overall appearence of the plot: fonts, font size, etc."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#always-begin-with-ggplot",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#always-begin-with-ggplot",
    "title": "Introduction to ggplot2",
    "section": "Always begin with ggplot()",
    "text": "Always begin with ggplot()\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, \n                     y = flipper_length_mm)) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nggplot(): graphing space.\ndata : data frame or tibble in long format.\n\nreference object for all subsequent arguments and functions.\n\naes() : defines the axes and uses column names."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#geometries-or-geom_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#geometries-or-geom_",
    "title": "Introduction to ggplot2",
    "section": "Geometries or geom_*",
    "text": "Geometries or geom_*\n\nggplot(data = data) +\n  geom_*(aes(x = x, \n             y = y, \n             color = z, \n             fill = f, \n             shape = w, \n             linetype = q), \n         color = color, # points, lines, error bars\n         shape = shape, # see pch numbers \n         linetype = linetype, # number, dotted line, dashed line...\n         fill = fill, # bars, columns, boxplots, violins\n         alpha=0.3, # transparency \n         shape = pch, # change the point shape; this is a number or vector of numbers\n         position = position_dodge() # bar plots are not stacked\n  )"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#shapes-and-lines",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#shapes-and-lines",
    "title": "Introduction to ggplot2",
    "section": "Shapes and lines",
    "text": "Shapes and lines\n\n\ngeom_point(shape = shape) can be specified using any of the pch numbers.\ngeom_line(linetype = linetype) can be specified with either an integer (0-6), a name (0 = blank, 1 = solid, 2 = dashed, 3 = dotted, 4 = dotdash, 5 = longdash, 6 = twodash."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#choosing-the-right-visualization",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#choosing-the-right-visualization",
    "title": "Introduction to ggplot2",
    "section": "Choosing the right visualization",
    "text": "Choosing the right visualization"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#different-types-of-geometries",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#different-types-of-geometries",
    "title": "Introduction to ggplot2",
    "section": "Different types of geometries",
    "text": "Different types of geometries"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#change-visual-values-using-scale_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#change-visual-values-using-scale_",
    "title": "Introduction to ggplot2",
    "section": "Change visual values using scale_*()",
    "text": "Change visual values using scale_*()\n\nLets you change the visual values of a group aesthetic: colors, fills, shapes (scale_manual).\nDiscrete and continuous scales.\nPredetermined color palettes: ggthemes::scale_color_colorblind()\nUse xlab('x-axis title') or ylab('y-axis title') or ggtitle('title)\nlabs(title, subtitle, caption, alt)\nChange x- or y- limits by using x_lims(c(0,1))\nFind more info here"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#scale_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#scale_",
    "title": "Introduction to ggplot2",
    "section": "scale_*()",
    "text": "scale_*()\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island), size=3)+\n  ggthemes::scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 shape=island), size = 3.5)+\n  scale_shape_discrete() #up to 6 discernible shapes"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#change-color-palettes-scale_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#change-color-palettes-scale_",
    "title": "Introduction to ggplot2",
    "section": "Change color palettes scale_*()",
    "text": "Change color palettes scale_*()\n\nscale_*() functions can modify:\n\nPosition via scale_x_*() or scale_y_*()\nColors via scale_color_*() and scale_fill_*()\nTransparency via scale_alpha_*()\nSizes via scale_size_*()\nShapes via scale_shape_*()\n\n* can take the following forms:\n\naxes: continuous, discrete, reverse, log10, sqrt, date, time.\nColors & fill: continuous, discrete, manual, gradient, hue, brewer.\nTransparency: continuous, discrete, manual, ordinal, identity, date.\nSizes: continuous, discrete, manual, ordinal, identity, area, date.\nShapes and line types: continuous, discrete, manual, ordinal, identity."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#color-palettes",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#color-palettes",
    "title": "Introduction to ggplot2",
    "section": "Color palettes",
    "text": "Color palettes\n\nAvailable packages with predefined palettes:\n\ncolorblindr\nviridis\nggthemes\nLaCroixPalette\nColorBrewer\nWesAnderson\nMoMa\n\nThis is a comprehensive list of color palettes in r curated by Emil Hvitfeldt."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#color-palette-types",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#color-palette-types",
    "title": "Introduction to ggplot2",
    "section": "Color palette types:",
    "text": "Color palette types:\n\n\n\nGenerally, there are 3 types of palettes:\n\nSequential: data that goes from low to high.\nDiverging: put equal emphasis on mid-range values and extremes.\nQualitative: best for categorical data. Visual differences are given by hues."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#divide-a-plot-using-facet_wrap-and-facet_grid",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#divide-a-plot-using-facet_wrap-and-facet_grid",
    "title": "Introduction to ggplot2",
    "section": "Divide a plot using facet_wrap() and facet_grid()",
    "text": "Divide a plot using facet_wrap() and facet_grid()"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#divide-a-plot-using-facet_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#divide-a-plot-using-facet_",
    "title": "Introduction to ggplot2",
    "section": "Divide a plot using facet_*()",
    "text": "Divide a plot using facet_*()\n\n\nWe have two options facet_wrap() and facet_grid().\nFacets divide a plot into subplots based on a variable in the dataset.\nAllows for comparison across groups.\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  facet_wrap(~island)\n\n\n\n\n\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  facet_grid(species~island)"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#the-look-of-the-graph-theme_",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#the-look-of-the-graph-theme_",
    "title": "Introduction to ggplot2",
    "section": "The look of the graph theme_*()",
    "text": "The look of the graph theme_*()\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nModifies the overall visual defaults of a plot: titles, background color, gridlines, legends,\ntheme() and theme_*().\n\ntheme will help you customize and personalize the overall look of your plot.\nYou can start with a predefined theme and then customize it with theme_*.\n\ntheme() will include element_* functions to modify different areas."
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#predefined-ggplot2-themes",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#predefined-ggplot2-themes",
    "title": "Introduction to ggplot2",
    "section": "Predefined ggplot2 themes",
    "text": "Predefined ggplot2 themes\n\nPredefined ggplot2 themes: theme_classic(), theme_gray(), theme_bw(), theme_linedraw(), theme_light(), theme_dark(), theme_minimal(), theme_void()"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#before-we-learn-about-modifying-the-theme",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#before-we-learn-about-modifying-the-theme",
    "title": "Introduction to ggplot2",
    "section": "Before we learn about modifying the theme()",
    "text": "Before we learn about modifying the theme()\n\nThis is my favorite theme cheatsheet"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#modify-elements-in-the-theme",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#modify-elements-in-the-theme",
    "title": "Introduction to ggplot2",
    "section": "Modify elements in the theme()",
    "text": "Modify elements in the theme()\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  theme(plot.background = element_rect(colour = 'green', fill = 'gray80'), \n        panel.background = element_rect(colour = 'orange', size = 3, fill = 'pink'),\n        panel.grid.major = element_line(color = 'blue', size = 2), \n        legend.position = 'bottom', \n        axis.title = element_text(size = 20))"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#useful-cheatsheets-for-theme",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#useful-cheatsheets-for-theme",
    "title": "Introduction to ggplot2",
    "section": "Useful cheatsheets for theme",
    "text": "Useful cheatsheets for theme\n\nThis is my favorite theme cheatsheet\nTheme cheatsheet 2\nTheme cheatsheet 3"
  },
  {
    "objectID": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#lets-remember-the-mapping-components",
    "href": "slides/uwin_ggplot2/ppt/uwin_intro_ggplot2.html#lets-remember-the-mapping-components",
    "title": "Introduction to ggplot2",
    "section": "Let’s remember the mapping components",
    "text": "Let’s remember the mapping components\n\nggplot(data = data, mapping = aes(x = x, y = y)) +\n  geom_*( ) + # geometries: e.g., geom_point(), geom_bar(), ...\n  facet_*( ) + # dividing your data into facets: facet_grid() and facet_wrap()\n  scale_*( ) + # controls visual values: colors, fills, shapes. E.g., scale_manual().\n  theme_*( )   # Controls the overall appearence of the plot: fonts, font size, etc."
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "",
    "text": "After today’s lecture, you’ll be able to:\n\nUnderstand the structure of tidy data\n\nUnderstand the main tidy verbs in dplyr to help tidy data\nOrganize and clean data downloaded from UWIN to run a single species single season occupancy analysis"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#learning-objectives",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#learning-objectives",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "",
    "text": "After today’s lecture, you’ll be able to:\n\nUnderstand the structure of tidy data\n\nUnderstand the main tidy verbs in dplyr to help tidy data\nOrganize and clean data downloaded from UWIN to run a single species single season occupancy analysis"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#packages",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#packages",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Packages",
    "text": "Packages\nThese are the packages that we are going to be working with for this tutorial.\n\nlibrary(dplyr) # grammar of data manipulation using set of verbs; tidyverse \nlibrary(tidyr) # tidy data; tidyverse\nlibrary(readr) # reads csv files; tidyverse\nlibrary(magrittr) # has the original pipe operator %&gt;%\nlibrary(janitor)"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#organize-the-project-and-directory",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#organize-the-project-and-directory",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Organize the project and directory",
    "text": "Organize the project and directory\nPerhaps you are used to starting by setting your directory using setwd(). However, I highly recommend you use RStudio Projects. RStudio projects make it straightforward to divide your work into multiple contexts, each with their own working directory, workspace, history, and source documents.\nWe are going to start by creating a Project in RStudio. A Project is essentially a directory which will contain all the files you need for a specific project. It will have a *.RProj file associated with it to begin with.\nGo to RStudio and click on File &gt; New Project.\n\nNow you see three options:\n\nNew directory: choose this option if you want to create a folder that will contain all the subdirectories and files of this particular project.\nExisting directory: use this option if you already created a folder which will contain all the subdirectories and files for this particular project. Choose that folder here.\nVersion Control: choose this option if you are going to work with a repository already stored in GitHub.\n\nFor our own project, let’s go ahead and choose ‘New Directory’ and let’s name our project: ‘2024-data-manipulation-UWIN’\n\nOther files inside the main directory\nYou will have a series of directories inside your project, depending on the type of work that you’ll be working on. Some people recommend following the same structure that you would use if creating an r package. However, I think that at a minimum, you could have the following structure:\n\n\nData is a directory that has all your original .csv files with the data that you will use in your analysis.\nFunctions is a directory that houses all the functions you create and that you will be using throughout your analysis. Some people include this directory as a subdirectory of R.\nPlots is a directory in which you will put all the graphs you create as part of your analysis.\nR is a directory that will have all the scripts needed for your analysis.\nResults is a directory that you may or may not need. The idea is to include all the resulting .csv or .rds files in here and keep them separate from your original files.\nYou may need other directories, especially if you are working with spatial data, for example, shapefiles, rasters, maps, etc."
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#naming-files",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#naming-files",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Naming files",
    "text": "Naming files\nNow we should discuss a very important topic which is naming files.\n1. File names should be machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\n2. File names should be human readable: use file names to describe what’s in the file.\n3. File names should play well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used.\nHere are a few examples of bad names:\n\nDocument 1.docx\nmanuscript_final.docx\nfinal_document_final.qmd\ndata.csv\n\nHere are a few examples of good names:\n\n2024_05_03_manuscript_name.R\n01_data_cleaning.R\n02_model.R\nfig-01.png\nexercise-uwin-workshop.qmd\n\nWhy are these good names? Well because if you have several of those, you can arrange them by date (descending or ascending), or by order of fig-01, fig-02.\n\n\n\n\n\n\nWarning\n\n\n\n\n\nIt’s important to note that fig-01.png is not the same as fig-1.png because your computer will read the following files in this order: fig1.png, fig10.png, fig11.png, fig2.png."
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-talk-about-pipes",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-talk-about-pipes",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Let’s talk about pipes",
    "text": "Let’s talk about pipes\n\nAt the beginning there was only one pipe operator, %&gt;%, which is from the magrittr package.\nThe idea is to have a way to pipe an object forward into a function or call expression.\nIt should be read as ‘then’. For example: The following code is read as follows: start with object df THEN select col1.\n\n\ndf %&gt;% select(col1)"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#native-pipe-in-base-r",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#native-pipe-in-base-r",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Native pipe in base R",
    "text": "Native pipe in base R\n\nNow, base R has it’s own pipe called native pipe, |&gt;, which is also read as ‘then’.\nYou can activate this native pipe by going to Tools &gt; Global options &gt; Code and selecting that option.\n\n\n\n\n\n\n\nYou can read more about the differences between both pipes here."
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dplyr-verbs-data-transformation",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dplyr-verbs-data-transformation",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "dplyr verbs: data transformation",
    "text": "dplyr verbs: data transformation\n\ndplyr is a package based on a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names\nfilter() picks cases based on their values\nsummarise() reduces multiple values down to a single summary\narrange() changes the ordering of the rows\ngroup_by() groups variables for you to perform operations on the grouped data. Always remember to ungroup() once you are finished\n\nThese can be linked together by pipes |&gt; or %&gt;%\nCool cheatsheet for dplyr"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#tidyr-for-tidying-data",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#tidyr-for-tidying-data",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "tidyr for tidying data",
    "text": "tidyr for tidying data\n\nThe tidyr package has a series of functions that are named after verbs that will help you tidy and clean data.\nThe goal of tidyr is to help you create tidy data. Tidy data is data where:\n\nEach variable is a column; each column is a variable\nEach observation is a row; each row is an observation\nEach value is a cell; each cell is a single value\n\nCool cheatsheet for tidyr"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#data-organization-for-an-occupancy-analysis",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#data-organization-for-an-occupancy-analysis",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Data organization for an occupancy analysis!",
    "text": "Data organization for an occupancy analysis!\nFirst things first, let’s see the data that we are going to be working with. To do so, let’s use a super handy package called readr which is part of the tidyverse, specifically a function called read_csv(). The data we want is a .csv document and is conveniently stored in a folder called data.\n\n\n\n\n\n\nImportant\n\n\n\n\n\nHowever, there is something we need to be aware of before we read in the file. The report that the UWIN database generates has this information at the top of the document on the first 3 rows. We will need this information later but not for the main data set, so we are going to create two data frames, one with the information on the top rows and one with the info starting on row 4:\n\n\n\n\n\nocc.data &lt;- readr::read_csv(file = './data/OccupancyReport.csv', \n                               # Skip row 1-3\n                               skip = 3,\n                               # identify how not available data are coded, you can use c('NA', 'N/A')\n                               na = 'NA', \n                               # define column types, readr guesses the ones we don't specify\n                               col_types = c('f', 'd', 'c', 'd', 'd'))\n\n# With glimpse we can see the name of each column, type, and the first rows \ndplyr::glimpse(occ.data)\n\nRows: 50\nColumns: 41\n$ Species   &lt;fct&gt; Coyote, Coyote, Coyote, Coyote, Coyote, Coyote, Coyote, Coyo…\n$ Season    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ Site      &lt;chr&gt; \"NCAP-MD-BSP1\", \"NCAP-MD-CCC1\", \"NCAP-MD-CRG1\", \"NCAP-MD-CVH…\n$ Latitude  &lt;dbl&gt; 38.8452, 38.9939, 38.8145, 39.0284, 38.7699, 38.9553, 38.814…\n$ Longitude &lt;dbl&gt; -76.9015, -77.0838, -76.9872, -77.0586, -77.0286, -76.8917, …\n$ Day_1     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ Day_2     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ Day_3     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ Day_4     &lt;dbl&gt; NA, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA, NA, 0, 0, 0, 0, 0,…\n$ Day_5     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, NA, 0, 0, 0, 1, 0, NA…\n$ Day_6     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_7     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ Day_8     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_9     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ Day_10    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_11    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_12    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_13    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, NA, 0, 0, 0, 0, 0, NA…\n$ Day_14    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_15    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_16    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_17    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ Day_18    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_19    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_20    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_21    &lt;dbl&gt; 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ Day_22    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_23    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_24    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_25    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_26    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_27    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_28    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_29    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ Day_30    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ Day_31    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ Day_32    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ Day_33    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ Day_34    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ Day_35    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ Day_36    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n\n\nNow let’s extract the Start and End dates, we may need them later on.\n\nocc.info &lt;- read_csv(file = './data/OccupancyReport.csv', \n                        n_max = 1) |&gt; \n  select('Start Date', 'End Date')\n  \nglimpse(occ.info)\n\nRows: 1\nColumns: 2\n$ `Start Date` &lt;chr&gt; \"1/10/2022\"\n$ `End Date`   &lt;chr&gt; \"2/14/2022\"\n\n\n\n\n\n\n\n\nTip\n\n\n\n\n\nLet’s look at the column names. They start with a capital letter and are separated by an underscore _. Let’s review the current name conventions:\n\nThis is important to remember so that you (and your team) can always stick to a name convention to make things easier for everyone. Whichever you use, DO NOT USE A SPACE TO SEPARATE WORDS.\n\nThese are ok for the name of a column: ‘day01’, ‘Day_1’, ‘day1’, ‘day-01’, ‘day-1’\nThis is not ok: ‘day 1’\n\n\n\n\nYou can leave the column names as is, but I want to show you a super handy function in package janitor that can help us rename all the columns to fit one naming convention. The options for case are ‘snake’, ‘lower_camel’, ‘title’, ‘upper_camel’.\n\nocc.data &lt;- janitor::clean_names(dat = occ.data, \n                                 case = 'snake')\nglimpse(occ.data)\n\nRows: 50\nColumns: 41\n$ species   &lt;fct&gt; Coyote, Coyote, Coyote, Coyote, Coyote, Coyote, Coyote, Coyo…\n$ season    &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, …\n$ site      &lt;chr&gt; \"NCAP-MD-BSP1\", \"NCAP-MD-CCC1\", \"NCAP-MD-CRG1\", \"NCAP-MD-CVH…\n$ latitude  &lt;dbl&gt; 38.8452, 38.9939, 38.8145, 39.0284, 38.7699, 38.9553, 38.814…\n$ longitude &lt;dbl&gt; -76.9015, -77.0838, -76.9872, -77.0586, -77.0286, -76.8917, …\n$ day_1     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ day_2     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ day_3     &lt;dbl&gt; NA, 0, NA, 0, NA, NA, NA, 0, NA, 0, 0, 0, NA, NA, 0, NA, NA,…\n$ day_4     &lt;dbl&gt; NA, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA, NA, 0, 0, 0, 0, 0,…\n$ day_5     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 1, NA, 0, 0, 0, 1, 0, NA…\n$ day_6     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_7     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ day_8     &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_9     &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ day_10    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_11    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_12    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_13    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, NA, 0, 0, 0, 0, 0, NA…\n$ day_14    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_15    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_16    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_17    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ day_18    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_19    &lt;dbl&gt; 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_20    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_21    &lt;dbl&gt; 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 1, 0, 0, 0, NA…\n$ day_22    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_23    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_24    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_25    &lt;dbl&gt; 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 1, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_26    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_27    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_28    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_29    &lt;dbl&gt; 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, NA, 0, 0, 0, 0, 0, NA…\n$ day_30    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ day_31    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ day_32    &lt;dbl&gt; 0, NA, 0, 0, 0, 0, 0, NA, 0, NA, NA, NA, 0, NA, NA, 0, 0, NA…\n$ day_33    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ day_34    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ day_35    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n$ day_36    &lt;dbl&gt; NA, NA, NA, NA, NA, 0, NA, NA, 0, NA, NA, NA, NA, NA, NA, 0,…\n\n\nHave you noticed that we have two species in our data?\n\nunique(occ.data$species)\n\n[1] Coyote                    Eastern cottontail rabbit\nLevels: Coyote Eastern cottontail rabbit"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dividing-data-into-occasions",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dividing-data-into-occasions",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Dividing data into occasions",
    "text": "Dividing data into occasions\nImagine we want to perform an occupancy analysis with our data.\nWe begin by dividing our data into occasions. In this case we have 36 days of sampling so now we want each occasion to have 7 days.\n\n# Separate only the days \ndays_oc &lt;- occ.data |&gt; \n  filter(species == 'Coyote')|&gt; \n  select(contains('day_')) \n  \n# Calculate number of weeks or occasions based on 7 day groups \nn_weeks &lt;- ceiling(ncol(days_oc)/7)\n# Create a vector where you assign the number of week to the day\nweek_groups &lt;- rep(1:n_weeks, each = 7)[1:ncol(days_oc)]\n\n# and write a function that keeps each occasion with all NA's as such and those with all 0's as 0, and those with at least 1 detection, as 1\ncombine_days &lt;- function(y, groups){\n  ans &lt;- rep(NA, max(groups))\n  for(i in 1:length(groups)){\n    tmp &lt;- as.numeric(y[groups == i])\n    if(all(is.na(tmp))){\n      next\n    } else {\n      ans[i] &lt;- as.numeric(sum(tmp, na.rm = TRUE)&gt;0)\n    }\n  }\n  return(ans)\n}\n\n# Apply this function across rows (in groups of 6)\ndata.weeks &lt;- t( # this transposes our matrix\n  apply(\n    days_oc, \n    1, # 1 is for rows\n    combine_days,\n    groups = week_groups\n  )\n)\n\n# Rename columns to match number of week \ndata.wk &lt;- data.weeks |&gt; \n  as.data.frame() |&gt; \n  rename_with(~paste0('week_', 1:n_weeks))\n\n# Now we can combine the species, season, site, latitude, longitude from coyote.data to our occasions.\ndata.occ &lt;- occ.data |&gt; \n  filter(species == 'Coyote')|&gt; \n  select(species, season, site, latitude, longitude) |&gt; \n  cbind(data.wk)\n\n\n\n\n\n\n\nImportant\n\n\n\n\n\nLet’s review what we just did. We have 36 days, so we collapsed them all into 7-day occasions. In total, we have 6 columns or occasions (weeks) but our 6th week only has 1 day worth of data. We will delete it for the sake of the exercise, but make sure that you consider the ecological implications for your species of the length of your occasions."
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dashboard-of-our-data-so-far",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#dashboard-of-our-data-so-far",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Dashboard of our data so far",
    "text": "Dashboard of our data so far\n\nlibrary(ggplot2)\n\nocc_long &lt;- data.occ |&gt; \n  pivot_longer(cols = starts_with('week_'), \n               names_to = 'week', \n               values_to = 'values') |&gt; \n  mutate(values = factor(values))\n\nggplot(occ_long, aes(x = week, y = site, fill = values))+\n  geom_tile( \n            color = 'white', \n            lwd = 1, \n            linetype = 1)+\n  coord_equal()+\n  labs(title = paste0('Weekly detections by site'))+\n  scale_fill_manual(values = c('#6F9CDE', '#FC8955'), \n                    na.value = '#A9A9A9') +\n  theme(legend.position = 'left', \n        axis.text.x = element_text(angle = 90), \n        legend.title = element_blank(), \n        axis.title = element_blank(), \n        plot.title = element_text(hjust=0, face = 'bold', size = 16)) -&gt; tile.plot \n\ntab &lt;- as.data.frame(\n  c(Start = occ.info$`Start Date`, \n    End = occ.info$`End Date`, \n    Sites = nrow(data.occ), \n    Species = as.character(occ_long$species[[1]]), \n    Occassions = n_weeks, \n    'Days per occassion' = 7)\n)\n\nlibrary(gridExtra)\np_tab &lt;- tableGrob(unname(tab), theme = ttheme_minimal(core=list(fg_params=list(hjust=0, x=0)),\n                                                       rowhead=list(fg_params=list(hjust=0, x=0, \n                                                                                   col = 'black'))))\ngrid.arrange(tile.plot, p_tab, ncol = 2, padding = unit(0, 'cm'))"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-tidy-the-spatial-covariates",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-tidy-the-spatial-covariates",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Let’s tidy the spatial covariates",
    "text": "Let’s tidy the spatial covariates\nThese are covariates that vary at the site level.\n\n# read in the file with covariates \ncovariates &lt;- read_csv('./data/covariates.csv')\n\n# make sure column names follow snake convention \ncovariates &lt;- janitor::clean_names(covariates, \n                                   \"snake\")\nglimpse(covariates)\n\nRows: 25\nColumns: 6\n$ site       &lt;chr&gt; \"NCAP-MD-BSP1\", \"NCAP-MD-CCC1\", \"NCAP-MD-CRG1\", \"NCAP-MD-CV…\n$ latitude   &lt;dbl&gt; 38.8452, 38.9939, 38.8145, 39.0284, 38.7699, 38.9553, 38.81…\n$ longitude  &lt;dbl&gt; -76.9015, -77.0838, -76.9872, -77.0586, -77.0286, -76.8917,…\n$ forest     &lt;dbl&gt; 0.5990142, 0.7361551, 0.6614681, 0.4533951, 0.7374635, 0.59…\n$ ag         &lt;dbl&gt; 0.19148783, 0.14867841, 0.23992384, 0.10802248, 0.09503045,…\n$ dist_water &lt;dbl&gt; 379.6535, 618.4484, 605.5428, 560.6045, 566.1160, 337.4902,…\n\n\nFirst thing we should do is scale our covariates so we can compare across them.\n\ncovariates.sc &lt;- covariates |&gt; \n  # Select only the columns you wish to scale\n  select(forest:dist_water) |&gt;\n  # mutate across all the columsn you wish to scale \n  mutate(across(forest:dist_water, \n                ~as.vector(scale(.x)))) |&gt; \n  # rename the columns you selected and add _scaled at the end of each one\n  rename_with(~paste0(.x, '_scaled')) |&gt; \n  # combine all the columns here and with the file covariates\n  cbind(covariates) |&gt; \n  # reorganize the columns in the order you want\n  relocate(site, latitude, longitude, forest, ag, dist_water, forest_scaled, ag_scaled, dist_water_scaled)\n\nglimpse(covariates.sc)\n\nRows: 25\nColumns: 9\n$ site              &lt;chr&gt; \"NCAP-MD-BSP1\", \"NCAP-MD-CCC1\", \"NCAP-MD-CRG1\", \"NCA…\n$ latitude          &lt;dbl&gt; 38.8452, 38.9939, 38.8145, 39.0284, 38.7699, 38.9553…\n$ longitude         &lt;dbl&gt; -76.9015, -77.0838, -76.9872, -77.0586, -77.0286, -7…\n$ forest            &lt;dbl&gt; 0.5990142, 0.7361551, 0.6614681, 0.4533951, 0.737463…\n$ ag                &lt;dbl&gt; 0.19148783, 0.14867841, 0.23992384, 0.10802248, 0.09…\n$ dist_water        &lt;dbl&gt; 379.6535, 618.4484, 605.5428, 560.6045, 566.1160, 33…\n$ forest_scaled     &lt;dbl&gt; -0.1500416, 0.6588543, 0.2183293, -1.0089438, 0.6665…\n$ ag_scaled         &lt;dbl&gt; 0.117804331, -0.812708927, 1.170618390, -1.696413643…\n$ dist_water_scaled &lt;dbl&gt; -0.56135757, 0.63584774, 0.57114511, 0.34584580, 0.3…"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-tidy-the-observational-covariates",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#lets-tidy-the-observational-covariates",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Let’s tidy the observational covariates",
    "text": "Let’s tidy the observational covariates\nThese are covariates that vary by occasions or within sites.\n\ntemp_covs &lt;- read_csv('./data/temp_covs.csv') |&gt; \n  select(!Site)\n\n# We have to summarize it for each occasion, remember you only have 6 occasions \nlibrary(purrr)\nrow_means &lt;- function(data) {\n  map(seq(1, ncol(data), by = 7),\n      ~rowMeans(select(data, .x:min(.x + 6, ncol(data))), na.rm = TRUE)) |&gt; \n       set_names(paste0(\"week_\", seq(1, 6, by = 1))) |&gt; \n       tibble::as_tibble()\n}\n\n\n# Apply the function and coerce the object to be a matrix \ntemp_avg &lt;-  row_means(temp_covs)"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#now-we-are-ready-to-create-our-unmarkedframeoccu-to-begin-an-occupancy-model.",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#now-we-are-ready-to-create-our-unmarkedframeoccu-to-begin-an-occupancy-model.",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "Now we are ready to create our unmarkedFrameOccu() to begin an occupancy model.",
    "text": "Now we are ready to create our unmarkedFrameOccu() to begin an occupancy model.\n\nlibrary(unmarked)\n\n# Detection data must only include the columns with the occasions\ny &lt;- data.occ |&gt; \n  select(week_1:week_6)\n\n# Site covariates must only be the columns with the scaled covariates   \nsiteCovs &lt;- covariates.sc |&gt; \n  select(forest_scaled:dist_water_scaled)\n\n# You need a list of matrices for the observation covariates, \n# And each matrix must be named \nobsCovs &lt;- list(temp_avg=temp_avg)\n\noccu.df &lt;- unmarkedFrameOccu(y = y, \n                             siteCovs = siteCovs, \n                             obsCovs = obsCovs)"
  },
  {
    "objectID": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#end",
    "href": "slides/data_manipulation/tutorial/tutorial-data-manipulation.html#end",
    "title": "Introduction to Data Manipulation in R using the Tidyverse",
    "section": "END",
    "text": "END"
  },
  {
    "objectID": "publications.html",
    "href": "publications.html",
    "title": "Peer-reviewed publications",
    "section": "",
    "text": "Palomo-Munoz, Gabriela, Mason Fidino, Ty J Werdel, Colleen W Piper, Travis Gallo, Matthew S Peek, Andrew M Ricketts, and Adam A Ahlers. 2024. “Mesopredators Have Differing Influences on Prey Habitat Use and Diel Activity in a Multipredator Landscape.” Ecosphere 15 (9): e70006. https://doi.org/10.1002/ecs2.70006.\n\n\nPalomo-Munoz, Gabriela, Ty J Werdel, Colleen W Piper, Matthew S Peek, Andrew M Ricketts, and Adam A Ahlers. 2023. “Spatiotemporal Distributions of Mammals Occurring in an Agro-Prairie Ecosystem.” John Wiley & Sons, Inc. Hoboken, USA. https://doi.org/10.1002/ecy.3945.\n\n\nPalomo-Munoz, Gabriela, Nicolás Gálvez, Valentina Alarcón, Eduardo Minte, Belén Gallardo, and Thomas Kramer. 2023. “Straight from the güiñas Mouth: Diet of a Neotropical Carnivore Documented Through Camera Traps.” Food Webs, e00296. https://doi.org/10.1016/j.fooweb.2023.e00296.\n\n\nBurnett, Jessica L, Renee Dale, Chung-Yi Hou, Gabriela Palomo-Munoz, Kaitlin Stack Whitney, Steve Aulenbach, Robert Sky Bristol, Denis Valle, and Tristan P Wellman. 2021. “Ten Simple Rules for Creating a Scientific Web Application.” PLOS Computational Biology 17 (12): e1009574. https://doi.org/10.1371/journal.pcbi.1009574.\n\n\nMarmol-Kattan, Alejandro, Gabriela Palomo-Munoz, Juan Pablo Pinto-Meneses, and Isabella Rosito-Prado. 2019. “REGISTRO NOTABLE DE DOS MESOCARNÍVOROS EN EL BOSQUE NUBOSO DE BAJA VERAPAZ, GUATEMALA.” Revista Mexicana de Mastozoologia Nueva Epoca, no. 1: 56–61. https://doi.org/10.22201/ie.20074484e.2019.1.1.271.\n\n\nBurnett, Jessica L, Lyndsie Wszola, and Gabriela Palomo-Muñoz. 2019. “bbsAssistant: An r Package for Downloading and Handling Data and Information from the North American Breeding Bird Survey.” Journal of Open Source Software 4 (44): 1768. https://doi.org/10.21105/joss.01768.\n\n\nCano, Enio B, and Gabriela Palomo-Muñoz. 2017. “La Verdadera Identidad Del Chupacabras: La Importancia de Las Colecciones de Historia Natural En La Desarticulacion de Los Mitos Modernos.” Revista de La Universidad de Guatemala, no. 34: 50–57. https://www.uvg.edu.gt/servicios/volumen-34/.\n\n\nWDix, Michael, Gabriela Palomo-Muñoz, and Margaret A Dix. 2017. “Bromelias Del Jardı́n Botánico Del Departamento de Biologı́a de La Universidad Del Valle de Guatemala.” Revista de La Universidad Del Valle de Guatemala, no. 34: 20–30. https://www.uvg.edu.gt/servicios/volumen-34/.\n\n\nPalomo-Munoz, Gabriela, Rony Garcia-Anleu, Gabriela Ponce-Santizo, and Jose. Moreira Ramirez. 2014. “Abundancia, Densidad y Patrones de Adividad de Ocelotes (Leopardus Pardalis) Utilizando Trampas cámara En El Biotopo Protegido Dos Lagunas, Petén, Guatemala.” Revista de La Universidad Del Valle de Guatemala, no. 29: 39–46. https://www.uvg.edu.gt/servicios/volumen-29/."
  },
  {
    "objectID": "projects/portfolio.html",
    "href": "projects/portfolio.html",
    "title": "Tidy Tuesday contributions",
    "section": "",
    "text": "Tidy Tuesday contributions\nThese are my contributions to #TidyTuesday which is a weekly social data project. I share my contributions on Fosstodon, X or Twitter, and Bluesky. Feedback is always welcome! And if you find my code useful, please either fork my repo or let me know.\n\n\n\n\n\n\n\n\n\n2024-01-30: Groundhog day\n\n\n\n\n\n\n\n2024-02-06: UNESCO heritage sites\n\n\n\n\n\n\n\n2024-02-13: Valentine’s Day\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2024-02-20: ISC Grants\n\n\n\n\n\n\n\n2024-03-05: Trashwheeler"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Gabriela Palomo",
    "section": "",
    "text": "Welcome to my website! My name is Gabriela Palomo and I am a carnivore ecologist from Guatemala (Central America) doing a post doc in the US at the University of Maryland with Dr Travis Gallo. I use this website to keep my blog called My Digital Notebook, description of my projects, my CV, and information on how to contact me.\nIf you would like me to review a paper please email me here:\ngabriella.palomo@gmail.com\n\n\nUniversity of Nebraska Lincoln, School of Natural Resources Lincoln, NE\nPh.D. in Natural Resources | August 2017 - January 2022\nUniversidad del Valle de Guatemala, Facultad de Educacion Guatemala City, Guatemala\nM.A. in Higher Education | August 2015 - June 2017\nUniversidad de San Carlos de Guatemala, Facultad de Medicina Veterinaria Guatemala City, Guatemala\nM.Sc. in Wildlife Management | August 2008 - June 2010\nUniversidad del Valle de Guatemala, Facultad de Educacion Guatemala City, Guatemala\nB.Sc in Biology | January 2001 - June 2007"
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Gabriela Palomo",
    "section": "",
    "text": "University of Nebraska Lincoln, School of Natural Resources Lincoln, NE\nPh.D. in Natural Resources | August 2017 - January 2022\nUniversidad del Valle de Guatemala, Facultad de Educacion Guatemala City, Guatemala\nM.A. in Higher Education | August 2015 - June 2017\nUniversidad de San Carlos de Guatemala, Facultad de Medicina Veterinaria Guatemala City, Guatemala\nM.Sc. in Wildlife Management | August 2008 - June 2010\nUniversidad del Valle de Guatemala, Facultad de Educacion Guatemala City, Guatemala\nB.Sc in Biology | January 2001 - June 2007"
  },
  {
    "objectID": "cliparts.html",
    "href": "cliparts.html",
    "title": "Clip arts",
    "section": "",
    "text": "Many of you know I draw silhouettes for phylopic. However, I realized that researchers require other types of clip arts for presentations, papers, posters, for example of a camera trap. Here, I will put a series of clip arts freely available (but protected under a CC license, see below) for anyone to use. They are mostly relevant to my work as an ecologist, but feel free to email me and make other requests!"
  },
  {
    "objectID": "cliparts.html#antenna-gps",
    "href": "cliparts.html#antenna-gps",
    "title": "Clip arts",
    "section": "Antenna (GPS)",
    "text": "Antenna (GPS)"
  },
  {
    "objectID": "cliparts.html#aru---automated-recording-units---call-logger---acoustics-devices",
    "href": "cliparts.html#aru---automated-recording-units---call-logger---acoustics-devices",
    "title": "Clip arts",
    "section": "ARU - Automated Recording Units - Call Logger - Acoustics Devices",
    "text": "ARU - Automated Recording Units - Call Logger - Acoustics Devices"
  },
  {
    "objectID": "cliparts.html#audiomoth---armygreen",
    "href": "cliparts.html#audiomoth---armygreen",
    "title": "Clip arts",
    "section": "Audiomoth - Armygreen",
    "text": "Audiomoth - Armygreen"
  },
  {
    "objectID": "cliparts.html#audiomoth---black",
    "href": "cliparts.html#audiomoth---black",
    "title": "Clip arts",
    "section": "Audiomoth - Black",
    "text": "Audiomoth - Black"
  },
  {
    "objectID": "cliparts.html#audiomoth---green",
    "href": "cliparts.html#audiomoth---green",
    "title": "Clip arts",
    "section": "Audiomoth - Green",
    "text": "Audiomoth - Green"
  },
  {
    "objectID": "cliparts.html#binoculars",
    "href": "cliparts.html#binoculars",
    "title": "Clip arts",
    "section": "Binoculars",
    "text": "Binoculars"
  },
  {
    "objectID": "cliparts.html#butterfly-net",
    "href": "cliparts.html#butterfly-net",
    "title": "Clip arts",
    "section": "Butterfly Net",
    "text": "Butterfly Net"
  },
  {
    "objectID": "cliparts.html#camera-trap",
    "href": "cliparts.html#camera-trap",
    "title": "Clip arts",
    "section": "Camera Trap",
    "text": "Camera Trap"
  },
  {
    "objectID": "cliparts.html#chemical-bottle",
    "href": "cliparts.html#chemical-bottle",
    "title": "Clip arts",
    "section": "Chemical bottle",
    "text": "Chemical bottle"
  },
  {
    "objectID": "cliparts.html#drone",
    "href": "cliparts.html#drone",
    "title": "Clip arts",
    "section": "Drone",
    "text": "Drone"
  },
  {
    "objectID": "cliparts.html#drone-low-saturation-of-color",
    "href": "cliparts.html#drone-low-saturation-of-color",
    "title": "Clip arts",
    "section": "Drone (low saturation of color)",
    "text": "Drone (low saturation of color)"
  },
  {
    "objectID": "cliparts.html#gps-unit",
    "href": "cliparts.html#gps-unit",
    "title": "Clip arts",
    "section": "GPS unit",
    "text": "GPS unit"
  },
  {
    "objectID": "cliparts.html#havahart",
    "href": "cliparts.html#havahart",
    "title": "Clip arts",
    "section": "Havahart",
    "text": "Havahart"
  },
  {
    "objectID": "cliparts.html#laptop",
    "href": "cliparts.html#laptop",
    "title": "Clip arts",
    "section": "Laptop",
    "text": "Laptop"
  },
  {
    "objectID": "cliparts.html#owl-box-nest",
    "href": "cliparts.html#owl-box-nest",
    "title": "Clip arts",
    "section": "Owl Box Nest",
    "text": "Owl Box Nest"
  },
  {
    "objectID": "cliparts.html#radio-collar",
    "href": "cliparts.html#radio-collar",
    "title": "Clip arts",
    "section": "Radio Collar",
    "text": "Radio Collar"
  },
  {
    "objectID": "cliparts.html#receiver-gps",
    "href": "cliparts.html#receiver-gps",
    "title": "Clip arts",
    "section": "Receiver (GPS)",
    "text": "Receiver (GPS)"
  },
  {
    "objectID": "cliparts.html#satellite-landsat",
    "href": "cliparts.html#satellite-landsat",
    "title": "Clip arts",
    "section": "Satellite, Landsat",
    "text": "Satellite, Landsat"
  },
  {
    "objectID": "cliparts.html#scope",
    "href": "cliparts.html#scope",
    "title": "Clip arts",
    "section": "Scope",
    "text": "Scope"
  },
  {
    "objectID": "cliparts.html#vaginal-implant-transmitter-vit",
    "href": "cliparts.html#vaginal-implant-transmitter-vit",
    "title": "Clip arts",
    "section": "Vaginal Implant Transmitter (VIT)",
    "text": "Vaginal Implant Transmitter (VIT)"
  },
  {
    "objectID": "cliparts.html#buy-me-a-coffee",
    "href": "cliparts.html#buy-me-a-coffee",
    "title": "Clip arts",
    "section": "Buy Me a Coffee",
    "text": "Buy Me a Coffee\nAll my silhouettes and clip arts are free but if you’d like to say thank you via a ‘buy me a coffee’ donation, I will greatly appreciate it. Just click the button below and follow the steps:"
  },
  {
    "objectID": "blog/posts/welcome/index.html",
    "href": "blog/posts/welcome/index.html",
    "title": "Welcome To My Digital Notebook",
    "section": "",
    "text": "Welcome to my blog! I decided to name it My Digital Notebook because I am used to take notes on notebooks whenever I’m reading a book or learning a new topic. For example, the notebook here is my Spatial Analysis in R notebook where I keep all my notes regarding this topic, for example, from reading a book chapter or watching a YouTube video, etc. That included code. This is not efficient for two reasons, first because I am constantly moving and need to keep as few things as I can, and second because code is not analogue! So I decided to create a blog to keep all my scripts perfectly organized so I can reference them in the future and have my code ready for whenever I need it instead of rummaging through my folders in external hard drives.\n\n\n\n\n\n\n\n\n\nMy Spatial Ecology Notebook\n\n\n\n\n\n\n\nMy GEE Notebbok\n\n\n\n\n\nI also think that some of these scripts may be useful to others to learn or improve their code. I would also love to write posts with others so I can have the opportunity to learn from others too. I think this could be a good space to have that.\nThanks for reading!\nG"
  },
  {
    "objectID": "blog/posts/rphylopic_ggplot2/index.html",
    "href": "blog/posts/rphylopic_ggplot2/index.html",
    "title": "Placing silhouettes inside plots (ggplot2) using rphylopic",
    "section": "",
    "text": "‘rphylopic’ is one of my most used r packages. It basically allows users to look for silhouettes that are freely available in phylopic.org and place them on any graph created in either base R or ggplot2. You can also use these silhouettes on maps or other plots, but here I will show you how to use rphylopic with ggplot2.\nThe documentation for phylopic is available here. This package is not new, it was created by Scott Chamberlain in 2018. Fun fact, I designed the original cheatsheet for this package back in 2019. Now it’s maintained by William Gearty and Lewis A Jones from the Paleoverse team."
  },
  {
    "objectID": "blog/posts/rphylopic_ggplot2/index.html#the-rphylopic-package",
    "href": "blog/posts/rphylopic_ggplot2/index.html#the-rphylopic-package",
    "title": "Placing silhouettes inside plots (ggplot2) using rphylopic",
    "section": "",
    "text": "‘rphylopic’ is one of my most used r packages. It basically allows users to look for silhouettes that are freely available in phylopic.org and place them on any graph created in either base R or ggplot2. You can also use these silhouettes on maps or other plots, but here I will show you how to use rphylopic with ggplot2.\nThe documentation for phylopic is available here. This package is not new, it was created by Scott Chamberlain in 2018. Fun fact, I designed the original cheatsheet for this package back in 2019. Now it’s maintained by William Gearty and Lewis A Jones from the Paleoverse team."
  },
  {
    "objectID": "blog/posts/rphylopic_ggplot2/index.html#what-is-phylopic",
    "href": "blog/posts/rphylopic_ggplot2/index.html#what-is-phylopic",
    "title": "Placing silhouettes inside plots (ggplot2) using rphylopic",
    "section": "What is phylopic?",
    "text": "What is phylopic?\nPhylopic is this amazing website created by Mike Keesey where digital artists (like me!) upload their silhouettes representing a taxonomic category. Usually, they represent a species, but sometimes you also have silhouettes for a family or a genus. If you find yourself using a lot of silhouettes for your work, I highly encourage you to donate to his patreon. I have done so in the past. Oh and be sure to follow Mike and phylopic on twitter or mastodon too."
  },
  {
    "objectID": "blog/posts/rphylopic_ggplot2/index.html#rphylopic-and-ggplot2",
    "href": "blog/posts/rphylopic_ggplot2/index.html#rphylopic-and-ggplot2",
    "title": "Placing silhouettes inside plots (ggplot2) using rphylopic",
    "section": "rphylopic and ggplot2",
    "text": "rphylopic and ggplot2\nFirst we will start by installing ‘rphylopic’:\n\n# Stable version from CRAN\ninstall.packages('rphylopic')\n\n# Development version from github\n# install.packages('devtools')\ndevtools::install_github('palaeoverse-community/rphylopic')\n\nThen we load the following packages and dataset that we will use:\n\nlibrary(ggplot2)\nlibrary(rphylopic)\nlibrary(dplyr)\n# We will use the tree dataset \ndata(\"trees\")\n\n\nLet’s start with a simple plot\nThe trees dataset provides measurements of diameter, height, and volume of timber in 31 felled black cherry trees. The diameter is labled as girth in the dataset so let’s start by renaming it to diameter.\n\ntrees &lt;- trees %&gt;% \n  rename(Diameter = Girth) # new name = old name\n\n# Let's check that it worked \nnames(trees)\n\n[1] \"Diameter\" \"Height\"   \"Volume\"  \n\n\nNow let’s fit a linear regression between Diameter and Volume. This is just a silly example just to have a graph on which we can plot a silhouette.\n\nggplot(trees,aes(Diameter, Volume)) +\n  geom_point() +\n  geom_smooth(method='lm', formula = y~x) +\n  theme_classic()+\n  theme(axis.title = element_text(face = 'bold', size = 16),\n        axis.text = element_text(size = 14)) -&gt; ourplot\nourplot \n\n\n\n\n\n\n\n\n\n\nNow let’s put a silhouette on that plot!\nLet’s start by checking if we have silhouettes for the species we want. In this case a black cherry tree which is Prunus serotina\n\nbct &lt;- pick_phylopic(name = 'Prunus serotina')\n\nError in get_uuid(name = name, n = n, url = FALSE) : Image resource not available for name. Ensure provided name is a valid taxonomic name or try a species/genus resolution name.\nWe got an error saying there are no available silhouettes for this species (note to self, we should draw this and upload it asap!). So let’s check another one that looks like our black cherry trees. How about Flowering Dogwood, Cornus florida. It’s not the same species obviously but the silhouette could represent either tree. Not ideal but for this example I suppose it’s ok.\n\nbct &lt;- pick_phylopic(name='Cornus florida')\n\nWarning in get_uuid(name = name, n = n, filter = filter, url = FALSE): Only 1\nitem(s) are available.\n\n\nThis is the only image. Returning this uuid data.\n\n\n[1] \"8b16a223-4e27-4ce5-83a4-904b86287d49\"\n\n\n\n\n\n\n\n\n\nIt shows a warning saying we only have one silhouette for this species. Sometimes, you get a species with more than one silhouette but you can see them all by typing 1 on the console when prompted. See my tweet here for an example on how to do this.\nNow back to our plot. Let’s add a silhouette. To know where to place it, think of the arguments x and y as coordinates on your graph, and the silhouette as a point you want to place in the plot. So here, I wanted it on the lower left part of the plot, which corresponds with x=20 and y = 10. The center of the silhouette will be placed on that point. The ysize argument controls how tall the silhouette will be, and is in relation to the y-axis scale.\n\nourplot +\n  add_phylopic(img = bct, # silhouette \n               x=20, # based on x axis coordinates\n               y=10, # based on y axis coordinates \n               ysize = 20) -&gt; ourplot \nourplot\n\n\n\n\n\n\n\n\n\n\nLet’s put the silhouette next to a legend\nNow because we want the silhouette outside the plot, we must set the coordinates to negative. In this case, the legend is at the bottom so we set the y-axis coordinates to -20.\n\nggplot(trees,aes(Diameter, Volume)) +\n  geom_point() +\n  geom_smooth(method='lm', formula = y~x, aes(color = 'lm')) +\n  scale_color_manual(name = 'Legend', values = 'blue')+\n  theme_classic()+\n  theme(axis.title = element_text(face = 'bold', size = 16),\n        axis.text = element_text(size = 14),\n        legend.position = 'bottom',\n      # The backgroun of the legend set to transparent because it \n      # overlaps the silhouette\n        legend.background = element_rect(fill=\"transparent\"))+\n  add_phylopic(img = bct, # silhouette \n               x=13, # based on x axis coordinates\n      # The y must be set to negative so it's outside the plot\n               y=-19, # based on y axis coordinates \n               ysize = 8) -&gt; ourplot_legend \nourplot_legend\n\n\n\n\n\n\n\n\n\n\nMore than one silhouette on the plot\nIf you want to add more than one silhouette, then just use the ‘add_phylopic()’ function again. I re-used the same silhouette, but you could use another one here.\n\nourplot +\n  add_phylopic(img = bct, # First silhouette \n               x=20, # based on x axis coordinates\n               y=10, # based on y axis coordinates \n               ysize = 20)+ # based on y axis coordinates \n  add_phylopic(img=bct, # Second silhouette \n               x=10, \n               y=70, \n               ysize = 30)\n\n\n\n\n\n\n\n\n\n\nPoints as silhouettes\nIf you wanted the points to be little trees instead of points, then you can do so like this. I personally don’t like plots like this but I am showing you it’s possible:\n\nggplot(trees,\n       aes(Diameter, Volume)) +\n    geom_point() +\n    geom_smooth(method='lm', formula = y~x) +\n    theme_classic()+\n    theme(axis.title = element_text(face = 'bold', size = 16),\n          axis.text = element_text(size = 14)) -&gt; plot2\n\nfor(i in 1:nrow(trees)){\n    plot2 &lt;-  plot2 + # These two names must match \n    add_phylopic(img = bct, \n                 x = trees$Diameter[i],\n                 y = trees$Volume[i], \n                 ysize = 5)\n}\n\nplot2\n\n\n\n\n\n\n\n\n\n\nLet’s not forget the attribution\nNow let’s not forget to add the attribution of the silhouette to the plot! You can also add the attribution in the caption or in the acknowledgment section of a publication.\n\nuuid_bct &lt;- get_uuid(name = 'Cornus florida')\nget_attribution(uuid_bct)\n\n$contributor\n[1] \"Gabriela Palomo-Munoz\"\n\n$contributor_uuid\n[1] \"f57cf3c4-210c-4bcf-a759-9fcbc0cd8ba1\"\n\n$created\n[1] \"2022-08-13\"\n\n$contact\n[1] \"gabriella.palomo@gmail.com\"\n\n$image_uuid\n[1] \"8b16a223-4e27-4ce5-83a4-904b86287d49\"\n\n$license\n[1] \"https://creativecommons.org/licenses/by/4.0/\"\n\n$license_abbr\n[1] \"CC BY 4.0\""
  },
  {
    "objectID": "blog/posts/rphylopic_ggplot2/index.html#final-graph",
    "href": "blog/posts/rphylopic_ggplot2/index.html#final-graph",
    "title": "Placing silhouettes inside plots (ggplot2) using rphylopic",
    "section": "Final graph!",
    "text": "Final graph!\n\natt &lt;- get_attribution(uuid_bct)$contributor \n\nourplot +\n  labs(caption = paste0('Silhouette available in phylopic.org, designed by ', att))\n\n\n\n\n\n\n\n\nAnd don’t forget to cite rphylopic too:\n\ncitation(\"rphylopic\")\n\n\nTo cite rphylopic in publications, use the following citation:\n\n  Gearty, W. and Jones, L.A. 2023. rphylopic: An R package for\n  fetching, transforming, and visualising PhyloPic silhouettes. Methods\n  in Ecology and Evolution, 14(11), 2700-2708. doi:\n  10.1111/2041-210X.14221.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {rphylopic: An R package for fetching, transforming, and visualising PhyloPic silhouettes},\n    author = {William Gearty and Lewis A. Jones},\n    year = {2023},\n    volume = {14},\n    number = {11},\n    pages = {2700-2708},\n    journal = {Methods in Ecology and Evolution},\n    doi = {10.1111/2041-210X.14221},\n  }\n\n\nAnd that’s it, that’s all I have for now. I will do another blog post with an example in base R and a map.\nGabby\n\n\n\n\n\n\nHow to save silhouettes\n\n\n\nif you want to save the silhouette in a specific directory then use the function ‘save_phylopic(img = bct, path =’./bct.png’, bg = ‘transparent’)’.\nThe bg argument is so that the silhouette is saved using a transparent bakcground and not a white one which would appear on your plot as a white square every time you wanted to insert the saved silhouette into a graph."
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html",
    "href": "blog/posts/attributions_rphylopic/index.html",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "",
    "text": "I explained a little of what phylopic and the rphylopic package are here. I wanted to continue this series with explaining how to use this versatile package but this time creating a workflow to include the attribution of several silhouettes in the caption of a figure created using ggplot2."
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#the-rphylopic-package",
    "href": "blog/posts/attributions_rphylopic/index.html#the-rphylopic-package",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "",
    "text": "I explained a little of what phylopic and the rphylopic package are here. I wanted to continue this series with explaining how to use this versatile package but this time creating a workflow to include the attribution of several silhouettes in the caption of a figure created using ggplot2."
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#the-problem",
    "href": "blog/posts/attributions_rphylopic/index.html#the-problem",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "The problem",
    "text": "The problem\nThe rphylopic package has a function to retrieve the attribution information from a silhouette: get_attribution(uuid=uuid). However, if you have several silhouettes you might want to automate the code to retrieve all the attributions in one step instead of for each silhouette. I came up with this workflow, which I hope will be useful to some:"
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#base-plot-using-ggplot2",
    "href": "blog/posts/attributions_rphylopic/index.html#base-plot-using-ggplot2",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "Base plot using ggplot2",
    "text": "Base plot using ggplot2\nLet’s start by creating a simple plot to use as an example.\n\n# packages\nlibrary(rphylopic)\nlibrary(ggplot2)\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n## Basic plot \npenguins %&gt;% \n  filter(species %in% c('Adelie', 'Gentoo')) %&gt;% \n  ggplot(aes(x=body_mass_g, y=bill_length_mm, color=species))+\n  geom_point(alpha=0.6)+\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_manual(values = c(\"#6495ED\", \"#FFA54F\"))+\n  xlab('Body mass (g)')+\n  ylab('Bill length (mm)')+\n  theme_classic()+\n  theme(legend.position = 'top',\n        legend.title = element_blank(),\n        legend.text = element_text(size=14),\n        axis.text = element_text(size=14),\n        axis.title = element_text(size=16)) -&gt; plot1\n\nplot1"
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#now-we-add-the-silhouettes-to-the-plot",
    "href": "blog/posts/attributions_rphylopic/index.html#now-we-add-the-silhouettes-to-the-plot",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "Now we add the silhouettes to the plot",
    "text": "Now we add the silhouettes to the plot\nNow that we have the basic plot let’s work on finding out which silhouettes we want to use. Sometimes a species may have more than one silhouette so we have to identify which specific silhouette we want and retrieve that specific uuid.\nThe species\n\n## Let's get the uuid numbers for our species of interest \ngentoo &lt;- c('Pygoscelis papua')\nadelie &lt;- c('Pygoscelis adeliae')\n\n# For example, the gentoo penguin has two silhouettes, let's select the\n# second one. Notice that you have to make the selection in the console.\n# The silhouettes appear in the plots panel.\n\n#pick_phylopic(gentoo) # 2 silhouettes \n#pick_phylopic(adelie) # 1 silhouette \n\n\n# Now let's get the uuid for each species, notice that we have to \n# indicate the number of available silhouettes using n and \n# the one we choose using square brackets\ngp &lt;- get_uuid('Pygoscelis papua', n=2)[2]\nap &lt;- get_uuid('Pygoscelis adeliae')\n\n## Let's put the silhouettes that we will use in the environment\ngent &lt;- get_phylopic(gp)\nadel &lt;- get_phylopic(ap)\n\n## Now we add the silhouettes to our basic plot \nplot1+\n  add_phylopic(img = gent, x=3000, y=42, ysize=3)+\n  add_phylopic(img = adel, x=6200, y=55, ysize = 3)-&gt;plot1\n\nplot1"
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#now-we-add-the-attribution-in-the-caption-of-the-plot",
    "href": "blog/posts/attributions_rphylopic/index.html#now-we-add-the-attribution-in-the-caption-of-the-plot",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "Now we add the attribution in the caption of the plot",
    "text": "Now we add the attribution in the caption of the plot\nNow that we have the basic plot, we want to add the attribution programmatically so we don’t have to retrieve the information of each silhouette one by one. We want to be able to add the attribution easily.\n\n## Let's create a list with the species we had already defined earlier\nspp &lt;- list(gentoo = gentoo, \n            adelie = adelie)\n\n## Now let's put the uuid of all our species in a list \nuuid_list &lt;- list(gentoo = gp, \n                  adelie = ap) \n\n## We create an empty list where we will put the attributions of each species \natt_cont &lt;- vector('list', length = length(spp))\nnames(att_cont) &lt;- names(uuid_list)\n\n# Now the contributor. You might select to include more fields, but I only used contributor. Check other fields available using the $\nfor (i in 1:length(spp)){\n  att_cont[[i]] &lt;- get_attribution(uuid = uuid_list[[i]])\n  att_cont[[i]] &lt;- paste0(spp[[i]], ', ', att_cont[[i]]$contributor)\n}\n\n#Now let's collapse species and contributors into one single string\nsp_att &lt;- paste(unlist(att_cont), collapse='; ')\n\n# Notice that we are using \\n to indicate a break in line\nplot1+\n  ## Notice that I am including the theme for the caption here!! \n  theme(plot.caption=element_text(face='italic', \n                                  size = 12, \n                                  vjust = -3), \n        plot.margin = margin(0, 0.5, 1, 0.5, 'cm'))+ \n  labs(caption = paste0('Attribution: ', sp_att, '\\n Silhouettes obtained from phylopic.org by Mike Keessey.')) -&gt;plot_caption\n\nplot_caption\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nLong captions\n\n\n\nUsing the package cowplot you can also add a caption with the info we saved in the sp_att object.\n\nlibrary(cowplot)\n## Let's add a subtitle using cowplot \nggdraw(add_sub(plot1,\n               size=12, \n               fontface = 'italic',\n               color='gray20',\n               x = 1, hjust = 1, # right aligned \n               paste0('Attribution: ', sp_att, '\\n Silhouettes obtained from phylopic.org by Mike Keessey.')))"
  },
  {
    "objectID": "blog/posts/attributions_rphylopic/index.html#cite-rphylopic-in-your-manuscript-or-work",
    "href": "blog/posts/attributions_rphylopic/index.html#cite-rphylopic-in-your-manuscript-or-work",
    "title": "Include attributions of phylopic silhouettes in the caption of a plot",
    "section": "Cite rphylopic in your manuscript or work:",
    "text": "Cite rphylopic in your manuscript or work:\n\ncitation('rphylopic')\n\n\nTo cite rphylopic in publications, use the following citation:\n\n  Gearty, W. and Jones, L.A. 2023. rphylopic: An R package for\n  fetching, transforming, and visualising PhyloPic silhouettes. Methods\n  in Ecology and Evolution, 14(11), 2700-2708. doi:\n  10.1111/2041-210X.14221.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {rphylopic: An R package for fetching, transforming, and visualising PhyloPic silhouettes},\n    author = {William Gearty and Lewis A. Jones},\n    year = {2023},\n    volume = {14},\n    number = {11},\n    pages = {2700-2708},\n    journal = {Methods in Ecology and Evolution},\n    doi = {10.1111/2041-210X.14221},\n  }\n\n\nAnd that’s it, that’s all I have for you. If you have any questions don’t hesitate to contact me.\nGabby"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "My name is Gabriela Palomo, I am a carnivore ecologist. I started this website to mainly talk about my projects and house my blog called My digital notebook. The idea behind my blog was to have a place that I can use as a digital notebook with notes on how I am learning and improving how to code in R. I like the idea of having a centralized website with an organized repository of all my scripts instead of having them scattered across multiple laptops and external hard drives. However, I think that others may find my code and explanations (i.e., blog posts) useful so I hope this blog can help others learn as well. I plan to cover from the most basic tasks/models to the more complex ones.\nThe easiest way to contact me is on Twitter, where I’m very active, or you can send me an email to gpalomo (at) umd.edu"
  },
  {
    "objectID": "blog/posts/make_email_easy_to_find/index.html",
    "href": "blog/posts/make_email_easy_to_find/index.html",
    "title": "Make your email easy to find",
    "section": "",
    "text": "If you are a researcher, one of my biggest pieces of advice is to make a website. It doesn’t matter if you are just starting grad school or have already graduated. The main idea behind having a website is to control how other researchers —or the media, potential employers, etc.— may find you. And then, of course, so that you can have all your papers readily available, as well as your CV/resume, etc. However, if you DO NOT have a website or have been postponing it because why do it today if you can do it tomorrow, then at least make sure other researchers can easily find ways to contact you.\nLast week, I emailed a group of researchers about a possible collaboration with me. I could find everyone’s email within seconds EXCEPT for one. I kept looking, but after 7 minutes I gave up, which meant that I wouldn’t be able to contact him/her and they would lose the opportunity to be in this collaboration -or at least to know about it even if they decline to be involved. So I started thinking about ways to make your email public without necessarily having a website.\nHere, I give you some ideas on how to make your email easy to find without having to create a website.\n\n\nIf you don’t have an (ORCID ID)[orcid.org] then I suggest you start one today. Basically, it’s like having a website for academics who publish but without photos. Every time you publish a paper, it will appear listed on your orcid website. In their website, orcid states that ‘You can connect your iD with your professional information — affiliations, grants, publications, peer review, and more.’. Another great thing is that you can have all the ways in which your name may appear on a publication. For example, if your name is Andrew but sometimes people call you Andy or Drew then you can list them all here so that your publications can be linked here no matter the way your name was spelled.\nGreat! How do you make your email be visible here?\n\nOn orcid’s website, you can control if you want all or just some of your emails public (green circle), only visible to orcid users who have logged in (yellow circle with a key), or private, which is visible only to you (red circle with lock). Having a public orcid profile means that whenever someone googles you, they see your orcid page as one of the top searches, and right at the top left corner is your email.\n\n\n\nAnother easy solution is to ask your advisor to include your email on his/her website. Chances are they already have one with a list of all the people working in his lab and a brief description of each one. If anyone googles you they can find your advisor’s website with your name, email, and information listed there.\n\n\n\nI went to grad school at the School of Natural Resources at the University of Nebraska Lincoln. On their website, they have a list of all their students, faculty, and staff. They have the option for students to have some information other than just their names listed on their website. So essentially, if you are a student, you have access to having a mini-website with a one-paragraph bio, email, CV/resume, list of publications, research interests, and a picture. Most schools will have something similar, so I encourage you to ask your school or look into it if it’s possible. My guess is that you’d just have to write an email to whoever is in charge of maintaining the website, including a picture of yourself and the rest of the information that you wish to appear on their website. An email is an easy thing to write, no?\n\n\n\nIf you use r or python chances are you have a github account. You can have a profile on your github so that you include a short bio of yourself, ways to contact you, a picture, your research interests, etc. This is my github profile.\n\nIf you notice, I have icons for all the ways in which you can contact me: Twitter, email, my website. Like I mentioned earlier, I control the narrative of how I present myself. So even if you don’t have any repositories yet on your github account, you can at least have your profile ready!\nHere’s a video showing you step-by-step instructions on how to create a github profile and more ways to customize it here.\n\nAnd that’s it! I’ve given you 4 easy ways to make your email easy to find for other researchers/employers, etc. Hope you find them useful.\nAlso, I didn’t leave the researcher out. I asked a friend for his email so I included him in the invitation to the paper. However, he didn’t reply. Maybe his email is not current or is not interested.\nGabby"
  },
  {
    "objectID": "blog/posts/make_email_easy_to_find/index.html#why-is-it-important-to-make-your-email-easy-to-find",
    "href": "blog/posts/make_email_easy_to_find/index.html#why-is-it-important-to-make-your-email-easy-to-find",
    "title": "Make your email easy to find",
    "section": "",
    "text": "If you are a researcher, one of my biggest pieces of advice is to make a website. It doesn’t matter if you are just starting grad school or have already graduated. The main idea behind having a website is to control how other researchers —or the media, potential employers, etc.— may find you. And then, of course, so that you can have all your papers readily available, as well as your CV/resume, etc. However, if you DO NOT have a website or have been postponing it because why do it today if you can do it tomorrow, then at least make sure other researchers can easily find ways to contact you.\nLast week, I emailed a group of researchers about a possible collaboration with me. I could find everyone’s email within seconds EXCEPT for one. I kept looking, but after 7 minutes I gave up, which meant that I wouldn’t be able to contact him/her and they would lose the opportunity to be in this collaboration -or at least to know about it even if they decline to be involved. So I started thinking about ways to make your email public without necessarily having a website.\nHere, I give you some ideas on how to make your email easy to find without having to create a website.\n\n\nIf you don’t have an (ORCID ID)[orcid.org] then I suggest you start one today. Basically, it’s like having a website for academics who publish but without photos. Every time you publish a paper, it will appear listed on your orcid website. In their website, orcid states that ‘You can connect your iD with your professional information — affiliations, grants, publications, peer review, and more.’. Another great thing is that you can have all the ways in which your name may appear on a publication. For example, if your name is Andrew but sometimes people call you Andy or Drew then you can list them all here so that your publications can be linked here no matter the way your name was spelled.\nGreat! How do you make your email be visible here?\n\nOn orcid’s website, you can control if you want all or just some of your emails public (green circle), only visible to orcid users who have logged in (yellow circle with a key), or private, which is visible only to you (red circle with lock). Having a public orcid profile means that whenever someone googles you, they see your orcid page as one of the top searches, and right at the top left corner is your email.\n\n\n\nAnother easy solution is to ask your advisor to include your email on his/her website. Chances are they already have one with a list of all the people working in his lab and a brief description of each one. If anyone googles you they can find your advisor’s website with your name, email, and information listed there.\n\n\n\nI went to grad school at the School of Natural Resources at the University of Nebraska Lincoln. On their website, they have a list of all their students, faculty, and staff. They have the option for students to have some information other than just their names listed on their website. So essentially, if you are a student, you have access to having a mini-website with a one-paragraph bio, email, CV/resume, list of publications, research interests, and a picture. Most schools will have something similar, so I encourage you to ask your school or look into it if it’s possible. My guess is that you’d just have to write an email to whoever is in charge of maintaining the website, including a picture of yourself and the rest of the information that you wish to appear on their website. An email is an easy thing to write, no?\n\n\n\nIf you use r or python chances are you have a github account. You can have a profile on your github so that you include a short bio of yourself, ways to contact you, a picture, your research interests, etc. This is my github profile.\n\nIf you notice, I have icons for all the ways in which you can contact me: Twitter, email, my website. Like I mentioned earlier, I control the narrative of how I present myself. So even if you don’t have any repositories yet on your github account, you can at least have your profile ready!\nHere’s a video showing you step-by-step instructions on how to create a github profile and more ways to customize it here.\n\nAnd that’s it! I’ve given you 4 easy ways to make your email easy to find for other researchers/employers, etc. Hope you find them useful.\nAlso, I didn’t leave the researcher out. I asked a friend for his email so I included him in the invitation to the paper. However, he didn’t reply. Maybe his email is not current or is not interested.\nGabby"
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html",
    "href": "blog/posts/rphylopic_baser/index.html",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "",
    "text": "I explained a little of what phylopic and the rphylopic package are here. I wanted to continue this series with explaining how to use this versatile package but this time in base r."
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#the-rphylopic-package",
    "href": "blog/posts/rphylopic_baser/index.html#the-rphylopic-package",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "",
    "text": "I explained a little of what phylopic and the rphylopic package are here. I wanted to continue this series with explaining how to use this versatile package but this time in base r."
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#basic-plot-in-base-r",
    "href": "blog/posts/rphylopic_baser/index.html#basic-plot-in-base-r",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Basic plot in base r",
    "text": "Basic plot in base r\nWe will use again the tree dataset and plot a simple linear model.\n\n# Let's call the data trees available in the dataset package\ndata(trees)\n## Let's see the names of the variables\nnames(trees)\n\n[1] \"Girth\"  \"Height\" \"Volume\"\n\n## Let's rename the variable 'girth' to 'dbh' \n## which stands for diameter at breast height\nnames(trees) &lt;- c('dbh', 'Height', 'Volume')\n## Let's check that it worked \nnames(trees)\n\n[1] \"dbh\"    \"Height\" \"Volume\"\n\n\n\n## Let's do the model first\nm &lt;- lm(dbh ~ Height, data = trees)\n## We have to predict some values to estimate the confidence intervals\nnd &lt;- seq(min(trees$Height), max(trees$Height), length.out=100)\npred &lt;- predict(m, newdata = data.frame(Height=nd), interval = 'confidence')\n## Let's make a new data frame with our x, predicted y, and conf.int.\nnd &lt;- data.frame(cbind(nd, pred))\n\n## Now the basic scatter plot \nplot(dbh ~ Height, data = trees)\n## Now let's add the fitted line from the lm model\nabline(m)\n## Let's add some lines for our confidence intervals \nlines(nd$nd, nd$lwr, lty = 'dashed', col = 'gray70')\nlines(nd$nd, nd$upr, lty = 'dashed', col = 'gray70')"
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#customizing-the-base-plot",
    "href": "blog/posts/rphylopic_baser/index.html#customizing-the-base-plot",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Customizing the base plot",
    "text": "Customizing the base plot\nNow that we have the basic plot, let’s customize it a little bit.\n\n## Now the basic scatter plot \nplot(dbh ~ Height, data = trees,\n     xlab = 'Height', \n     ylab = 'DBH',\n     font.lab = 14, # x and y labels Using font 14 which is \n     font.axis = 14,\n     ylim=c(0,20),\n     pch = 20)\ntitle(main = \"Graph in base r\",\n     adj = 0,\n     font.main = 15, # main title font 14 which is in bold\n     cex.main = 2) # font size of main title)\ntitle(sub = \"Source: trees\",\n      font.sub = 14,\n      cex.sub = 0.75,\n      adj = 1,)\n## I want shaded confidence intervals so for that we will use \n## the function polygon()\npolygon(c(nd$nd, rev(nd$nd)),\n        c(nd$lwr,rev(nd$upr)),\n        col=adjustcolor('dodgerblue', alpha=0.1),\n        border=NA)\n## Now let's add the fitted line from the lm model\nabline(m, col = \"#00688B\",  lwd = 2)"
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#now-lets-add-a-silhouette-to-this-plot",
    "href": "blog/posts/rphylopic_baser/index.html#now-lets-add-a-silhouette-to-this-plot",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Now let’s add a silhouette to this plot",
    "text": "Now let’s add a silhouette to this plot\nTo add a silhouette to a base plot you can do it three ways using the add_phylopic_base() function:\n\nby calling the uuid directly: add_phylopic_base(uuid=uuid). Remember that you can always check the uuid for any silhouette by first running the function get_uuid(name = ‘genus species’).\nby calling the species name: add_phylopic_base(name=‘genus species’), or\nby loading a saved image in your working directory: add_phylopic_base(img=img)\n\n\n\n\n\n\n\nVisualize silhouettes in the viewer\n\n\n\n\n\nIf you are using RStudio, then you can visualize the silhouettes for any species -or whatever taxonomic category- in the viewer. This is especially useful for species that have multiple silhouettes.\npick_phylopic(name = ‘Canis lupus’)\nAnd type 1 in the console to change to the following silhouettes.\nOnce you picked a specific silhouette, then you can do the following which will save the uuid to ‘sil’.\nsil &lt;- pick_phylopic(name = ‘Canis lupus’, n=1)\n\n\n\n\n## First we load the rphylopic package \n# install.packages('rphylopic')\nlibrary(rphylopic)\n\nYou are using rphylopic v.1.3.0. Please remember to credit PhyloPic contributors (hint: `get_attribution()`) and cite rphylopic in your work (hint: `citation(\"rphylopic\")`).\n\n## Then we make the plot \n## Now the basic scatter plot \nplot(dbh ~ Height, data = trees,\n     xlab = 'Height', \n     ylab = 'DBH',\n     font.lab = 14, # x and y labels Using font 14 which I think is Century Gothic. \n     font.axis = 14,\n     ylim=c(0,20),\n     pch = 20)\ntitle(main = \"Graph in base r\",\n     adj = 0,\n     font.main = 15, # main title font family 15 is 14 in bold\n     cex.main = 2) # font size of main title)\ntitle(sub = \"Source: trees\",\n      font.sub = 14,\n      cex.sub = 0.75,\n      adj = 1,)\n## I want shaded confidence intervals so for that we will use \n## the function polygon()\npolygon(c(nd$nd, rev(nd$nd)),\n        c(nd$lwr,rev(nd$upr)),\n        col=adjustcolor('dodgerblue', alpha=0.1),\n        border=NA)\n## Now let's add the fitted line from the lm model\nabline(m, col = \"#00688B\",  lwd = 2)\n\n## Now we add the silhouette! \nadd_phylopic_base(name = 'Cornus florida', \n                  x = 85, \n                  y = 5,  \n                  ysize = 7) # This is in the same scale as your y-axis\n\nWarning: You've used the `name` argument. You may want to use `verbose = TRUE`\nto get attribution information for the silhouette(s).\n\n\n\n\n\n\n\n\n\nThe key thing to keep in mind is that what guides the position and size of the silhouette inside the plot is the scale you are using in that plot. In this case, the size I chose for the silhouette ysize=7 is in relation to the y-axis scale, which in this case is 7 units in y-axis. The position corresponds with the x- and y-axis coordinates. See how the center of the silhouette is at x=85 and y=5."
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#what-if-you-want-the-silhouette-outside-the-plot",
    "href": "blog/posts/rphylopic_baser/index.html#what-if-you-want-the-silhouette-outside-the-plot",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "What if you want the silhouette outside the plot",
    "text": "What if you want the silhouette outside the plot\nJust try negative values for x and y. That will help you position it outside the plot area, for example next to the legend. For example, try the plot above but using x=85 and y = -5"
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#dont-forget-the-attribution",
    "href": "blog/posts/rphylopic_baser/index.html#dont-forget-the-attribution",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Don’t forget the attribution!",
    "text": "Don’t forget the attribution!\n\nuuid &lt;- get_uuid(name = \"Cornus florida\")\n# Get attribution data for uuid\nat &lt;- get_attribution(uuid = uuid)\nat\n\n$contributor\n[1] \"Gabriela Palomo-Munoz\"\n\n$contributor_uuid\n[1] \"f57cf3c4-210c-4bcf-a759-9fcbc0cd8ba1\"\n\n$created\n[1] \"2022-08-13\"\n\n$contact\n[1] \"gabriella.palomo@gmail.com\"\n\n$image_uuid\n[1] \"8b16a223-4e27-4ce5-83a4-904b86287d49\"\n\n$license\n[1] \"https://creativecommons.org/licenses/by/4.0/\"\n\n$license_abbr\n[1] \"CC BY 4.0\""
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#final-plot",
    "href": "blog/posts/rphylopic_baser/index.html#final-plot",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Final plot",
    "text": "Final plot\n\n## First we load the rphylopic package \n# install.packages('rphylopic')\nlibrary(rphylopic)\n\n## Then we make the plot \n## Now the basic scatter plot \nplot(dbh ~ Height, data = trees,\n     xlab = 'Height', \n     ylab = 'DBH',\n     font.lab = 14, # x and y labels Using font 14 which is \n     font.axis = 14,\n     ylim=c(0,20),\n     pch = 20)\ntitle(main = \"Graph in base r\",\n     adj = 0,\n     font.main = 15, # main title font 14 which is in bold\n     cex.main = 2) # font size of main title)\ntitle(sub = paste0(\"Source: trees\", \"; silhouette by:\" , at$contributor), # at is the attribution of the silhouette \n      font.sub = 14,\n      cex.sub = 0.75,\n      adj = 1,)\n## I want shaded confidence intervals so for that we will use \n## the function polygon()\npolygon(c(nd$nd, rev(nd$nd)),\n        c(nd$lwr,rev(nd$upr)),\n        col=adjustcolor('dodgerblue', alpha=0.1),\n        border=NA)\n## Now let's add the fitted line from the lm model\nabline(m, col = \"#00688B\",  lwd = 2)\n\n## Now we add the silhouette! \nadd_phylopic_base(name = 'Cornus florida', \n                  x = 85, \n                  y = 5,  \n                  ysize = 7) # This is in the same scale as your y-axis\n\nWarning: You've used the `name` argument. You may want to use `verbose = TRUE`\nto get attribution information for the silhouette(s)."
  },
  {
    "objectID": "blog/posts/rphylopic_baser/index.html#cite-rphylopic-in-your-manuscript-or-work",
    "href": "blog/posts/rphylopic_baser/index.html#cite-rphylopic-in-your-manuscript-or-work",
    "title": "Placing silhouettes in base r plots using rphylopic",
    "section": "Cite rphylopic in your manuscript or work:",
    "text": "Cite rphylopic in your manuscript or work:\n\ncitation('rphylopic')\n\n\nTo cite rphylopic in publications, use the following citation:\n\n  Gearty, W. and Jones, L.A. 2023. rphylopic: An R package for\n  fetching, transforming, and visualising PhyloPic silhouettes. Methods\n  in Ecology and Evolution, 14(11), 2700-2708. doi:\n  10.1111/2041-210X.14221.\n\nA BibTeX entry for LaTeX users is\n\n  @Article{,\n    title = {rphylopic: An R package for fetching, transforming, and visualising PhyloPic silhouettes},\n    author = {William Gearty and Lewis A. Jones},\n    year = {2023},\n    volume = {14},\n    number = {11},\n    pages = {2700-2708},\n    journal = {Methods in Ecology and Evolution},\n    doi = {10.1111/2041-210X.14221},\n  }\n\n\nAnd that’s it, that’s all I have for you. If you have any questions don’t hesitate to contact me.\nGabby"
  },
  {
    "objectID": "blog/posts/scientific-diagrams/index.html",
    "href": "blog/posts/scientific-diagrams/index.html",
    "title": "Scientific Diagrams",
    "section": "",
    "text": "The following diagrams are not organized in any particular order. At some point, when I have several linked, I’ll organize them by categories.\n\nSoares et al. 2022\n\nIslands are becoming taxonomically and functionally more similar after losing unique bird species and gaining common widespread birds.\n\n\nPilowsky et al. 2022\n\nModeling the mechanisms that govern the structure and dynamics of biodiversity.\n\n\nRiva & Nielsen 2020\n\nSix key steps for functional landscape analyses of habitat change\n\n\nBroadley et al. 2019\n\nSpace use is one factor affecting detections on CTs. Here, two aspects of space use are considered: home-range size and movement rate.\n\n\nNaves-Alegre et al. 2022\n\nResults of the spatial and spatio-temporal co-occurrence analyses between pairs of species, both qualitative co-occurrence and quantitative GLMs (spatial co-occurrence) and GLMMs (spatio-temporal co-occurrence) that relate the abundances of the species.\n\n\nRodrigues et al. 2022\n\nSynthesis of the observed impacts of land-use transition on mean annual evapotranspiration (ET) and average land surface temperature (LST) in the Cerrado.\n\n\nPalmer et al. 2022\n\nDynamic landscapes of fear: understanding spatiotemporal risk.\n\n\n\n\nGrames, Schwartz, Elphick. 2022.\n\nConceptual flowchart of a systematic process to develop conceptual models of alternative hypotheses in which (a) the scope of the research question is formally defined, (b) a systematic review is conducted, (c) researchers extract authors’ hypotheses as implied causal relationships that are (d) merged into a graphical model that can be (e) analysed to identify trends in scientific thinking.\n\n\nMagle & Fidino 2018.\n\nTransition probabilities between the three possible states a habitat fragment could transition between from 1 year to the next.\n\n\nSuraci et al. 2022\n\nBeyond spatial overlap: harnessing new technologies to resolve the complexities of predator–prey interactions.\n\n\n\nGamez & Harris 2022\n\nConceptual diagram of a vertical forest ecosystem.\n\n\nSiren et al. 2022.\n\nForecasting species distributions: Correlation does not equal causation.\n\n\nFord & Goheen. 2015.\n\nConceptual Framework for Evaluating Alternative Hypotheses for a Three-Level Trophic Cascade Involving a Large Carnivore, its Herbivorous Prey, and Plants.\n\nBack to top"
  },
  {
    "objectID": "blog/posts/scientific-diagrams/index.html#scientific-diagrams",
    "href": "blog/posts/scientific-diagrams/index.html#scientific-diagrams",
    "title": "Scientific Diagrams",
    "section": "",
    "text": "The following diagrams are not organized in any particular order. At some point, when I have several linked, I’ll organize them by categories.\n\nSoares et al. 2022\n\nIslands are becoming taxonomically and functionally more similar after losing unique bird species and gaining common widespread birds.\n\n\nPilowsky et al. 2022\n\nModeling the mechanisms that govern the structure and dynamics of biodiversity.\n\n\nRiva & Nielsen 2020\n\nSix key steps for functional landscape analyses of habitat change\n\n\nBroadley et al. 2019\n\nSpace use is one factor affecting detections on CTs. Here, two aspects of space use are considered: home-range size and movement rate.\n\n\nNaves-Alegre et al. 2022\n\nResults of the spatial and spatio-temporal co-occurrence analyses between pairs of species, both qualitative co-occurrence and quantitative GLMs (spatial co-occurrence) and GLMMs (spatio-temporal co-occurrence) that relate the abundances of the species.\n\n\nRodrigues et al. 2022\n\nSynthesis of the observed impacts of land-use transition on mean annual evapotranspiration (ET) and average land surface temperature (LST) in the Cerrado.\n\n\nPalmer et al. 2022\n\nDynamic landscapes of fear: understanding spatiotemporal risk.\n\n\n\n\nGrames, Schwartz, Elphick. 2022.\n\nConceptual flowchart of a systematic process to develop conceptual models of alternative hypotheses in which (a) the scope of the research question is formally defined, (b) a systematic review is conducted, (c) researchers extract authors’ hypotheses as implied causal relationships that are (d) merged into a graphical model that can be (e) analysed to identify trends in scientific thinking.\n\n\nMagle & Fidino 2018.\n\nTransition probabilities between the three possible states a habitat fragment could transition between from 1 year to the next.\n\n\nSuraci et al. 2022\n\nBeyond spatial overlap: harnessing new technologies to resolve the complexities of predator–prey interactions.\n\n\n\nGamez & Harris 2022\n\nConceptual diagram of a vertical forest ecosystem.\n\n\nSiren et al. 2022.\n\nForecasting species distributions: Correlation does not equal causation.\n\n\nFord & Goheen. 2015.\n\nConceptual Framework for Evaluating Alternative Hypotheses for a Three-Level Trophic Cascade Involving a Large Carnivore, its Herbivorous Prey, and Plants.\n\nBack to top"
  },
  {
    "objectID": "blog.html",
    "href": "blog.html",
    "title": "My Digital Notebook",
    "section": "",
    "text": "My Digital Notebook\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nInclude attributions of phylopic silhouettes in the caption of a plot\n\n\n\n\n\n\n\n\n\n\n\nSep 18, 2023\n\n\nGabriela Palomo-Munoz\n\n\n\n\n\n\n\n\n\n\n\n\nPlacing silhouettes in base r plots using rphylopic\n\n\n\n\n\n\n\n\n\n\n\nApr 9, 2023\n\n\nGabriela Palomo-Munoz\n\n\n\n\n\n\n\n\n\n\n\n\nPlacing silhouettes inside plots (ggplot2) using rphylopic\n\n\n\n\n\n\n\n\n\n\n\nMar 29, 2023\n\n\nGabriela Palomo-Munoz\n\n\n\n\n\n\n\n\n\n\n\n\nMake your email easy to find\n\n\n\n\n\n\n\n\n\n\n\nMar 23, 2023\n\n\nGabriela Palomo-Munoz\n\n\n\n\n\n\n\n\n\n\n\n\nScientific Diagrams\n\n\n\n\n\n\n\n\n\n\n\nOct 15, 2022\n\n\nGabriela Palomo-Munoz\n\n\n\n\n\n\n\n\n\n\n\n\nWelcome To My Digital Notebook\n\n\n\n\n\n\n\n\n\n\n\nSep 9, 2022\n\n\nGabby Palomo\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "cv.html",
    "href": "cv.html",
    "title": "CV in pictures",
    "section": "",
    "text": "My CV in pictures\n\n\n\nHere is a link to my CV but I include here photographs of everything I included as a way to represent my professional experience in pictures. Some of these were taken with a cellphone so the quality may not be ideal. The point, however, is to show some of the work I’ve done previously as well as the places where I’ve worked.\n\n\nDirector of the Botanical Garden at del Valle University\n\n2013-2017\n\n\nGuatemala, City\n\nThis Botanical Garden is housed inside del Valle University in Guatemala and it has one of the largest live orchid and bromeliad collections in the country. The collection has more than 150 different orchid species and more than 60 bromeliad species from Guatemala.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCurator of the Vertebrate Collection at Del Valle University\n\n2011-2017\n\n\nGuatemala City\n\nFor six years, I was the curator of the vertebrate collection at del Valle University in Guatemala City. Guatemala only has two Zoological Collections. I worked here as an undergrad so when the University offered me this job I jumped at the opportunity."
  },
  {
    "objectID": "old_404.html",
    "href": "old_404.html",
    "title": "Page Not Found",
    "section": "",
    "text": "The page you requested cannot be found (perhaps it was moved or renamed).\nYou may want to try searching to find the page’s new location."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#instructors",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#instructors",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Instructors",
    "text": "Instructors\n\n\nGabriela Palomo gabriella.palomo@gmail.com\n\nhttps://twitter.com/gabbspalomo\nPostdoc at the University of Maryland\nCarnivore ecologist but nowadays I am more of a Data Scientist\n\n\n\n\n\n\n\nHannah Griebling\nhgriebli@mail.ubc.ca\n\nPhD Candidate at University of British Columbia\nCognitive ecologist: focus on urban raccoon cognition and behavior"
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#learning-objectives",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#learning-objectives",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Learning objectives",
    "text": "Learning objectives\n\nAfter today’s lecture, you’ll be able to:\n\nUnderstand the structure of tidy data\n\nUnderstand the main tidy verbs in dplyr to help tidy data\nOrganize and clean data downloaded from UWIN to run a single species single season occupancy analysis"
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#organize-the-project-and-directory",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#organize-the-project-and-directory",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Organize the project and directory",
    "text": "Organize the project and directory\n\nI highly recommend you use RStudio Projects instead of setwd()\nGo to RStudio and click on File &gt; New Project."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#now-you-see-three-options",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#now-you-see-three-options",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Now you see three options:",
    "text": "Now you see three options:\n\n\nNew directory: choose this option if you want to create a folder that will contain all the subdirectories and files of this particular project.\nExisting directory: use this option if you already created a folder which will contain all the subdirectories and files for this particular project. Choose that folder here.\nVersion Control: choose this option if you are going to work with a repository already stored in GitHub.\n\n\n\nFor our own project, let’s go ahead and choose New Directory and let’s name our project: 2024-data-manipulation-UWIN."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#other-files-inside-the-main-directory",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#other-files-inside-the-main-directory",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Other files inside the main directory",
    "text": "Other files inside the main directory\nYou will have a series of directories inside your project, depending on the type of work that you’ll be working on. Some people recommend following the same structure that you would use if creating an r package. However, I think that at a minimum, you could have the following structure:"
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#other-files-inside-the-main-directory-1",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#other-files-inside-the-main-directory-1",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Other files inside the main directory",
    "text": "Other files inside the main directory\n\nData is a directory that has all your original .csv files with the data that you will use in your analysis.\nFunctions is a directory that houses all the functions you create and that you will be using throughout your analysis. Some people include this directory as a subdirectory of R.\nPlots is a directory in which you will put all the graphs you create as part of your analysis.\nR is a directory that will have all the scripts needed for your analysis.\nResults is a directory that you may or may not need. The idea is to include all the resulting .csv or .rds files in here and keep them separate from your original files.\nYou may need other directories, especially if you are working with spatial data, for example, shapefiles, rasters, maps, etc."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#naming-files",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#naming-files",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Naming files",
    "text": "Naming files\n\nFile names should be machine readable: avoid spaces, symbols, and special characters. Don’t rely on case sensitivity to distinguish files.\nFile names should be human readable: use file names to describe what’s in the file.\nFile names should play well with default ordering: start file names with numbers so that alphabetical sorting puts them in the order they get used."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#examples",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#examples",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Examples:",
    "text": "Examples:\n\nBad namesGood names\n\n\n\nDocument 1.docx\nmanuscript_final.docx\nfinal_document_final.qmd\ndata.csv\n\n\n\n\n2024_05_03_manuscript_name.R\n01_data_cleaning.R\n02_model.R\nfig-01.png\nexercise-uwin-workshop.qmd\n\n\n\n\n\nWhy are these good names? Well because if you have several of those, you can arrange them by date (descending or ascending), or by order of fig-01, fig-02.\n\n\n\n\n\n\n\n\nWarning\n\n\nIt’s important to note that fig-01.png is not the same as fig-1.png because your computer will read the following files in this order: fig1.png, fig10.png, fig11.png, fig2.png."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#lets-talk-about-pipes",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#lets-talk-about-pipes",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Let’s talk about pipes",
    "text": "Let’s talk about pipes\n\nAt the beginning there was only one pipe operator, %&gt;%, which is from the magrittr package.\nThe idea is to have a way to pipe an object forward into a function or call expression.\nIt should be read as ‘then’. For example: The following code is read as follows: start with object df THEN select col1.\n\n\ndf %&gt;% select(col1)"
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#native-pipe-in-base-r",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#native-pipe-in-base-r",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "Native pipe in base R",
    "text": "Native pipe in base R\n\nNow, base R has it’s own pipe called native pipe, |&gt;, which is also read as ‘then’.\nYou can activate this native pipe by going to Tools &gt; Global options &gt; Code and selecting that option.\n\n\n\n\n\n\n\n\nYou can read more about the differences between both pipes here."
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#dplyr-verbs-data-transformation",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#dplyr-verbs-data-transformation",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "dplyr verbs: data transformation",
    "text": "dplyr verbs: data transformation\n\ndplyr is a package based on a grammar of data manipulation, providing a consistent set of verbs that help you solve the most common data manipulation challenges:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names\nfilter() picks cases based on their values\nsummarise() reduces multiple values down to a single summary\narrange() changes the ordering of the rows\ngroup_by() groups variables for you to perform operations on the grouped data. Always remember to ungroup() once you are finished\n\nThese can be linked together by pipes |&gt; or %&gt;%\nCool cheatsheet for dplyr"
  },
  {
    "objectID": "slides/data_manipulation/ppt/ppt_data_manipulation.html#tidyr-for-tidying-data",
    "href": "slides/data_manipulation/ppt/ppt_data_manipulation.html#tidyr-for-tidying-data",
    "title": "Introduction to  Data Manipulation in R  using the Tidyverse",
    "section": "tidyr for tidying data",
    "text": "tidyr for tidying data\n\nThe tidyr package has a series of functions that are named after verbs that will help you tidy and clean data.\nThe goal of tidyr is to help you create tidy data. Tidy data is data where:\n\nEach variable is a column; each column is a variable\nEach observation is a row; each row is an observation\nEach value is a cell; each cell is a single value\n\nCool cheatsheet for tidyr\n\n\n\n\nUWIN R Workshops - March 2024"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#learning-objectives",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#learning-objectives",
    "title": "Introduction to ggplot2",
    "section": "Learning objectives",
    "text": "Learning objectives\nAfter today’s lecture, you’ll be able to:\n\nUnderstand the basic syntax of ggplot.\nCreate basic plots: bar, points, lines, boxplots, error bars, etc.\nCreate color palettes and use colors effectively: qualitative, secuential, and diverging palettes.\nCustomize the theme of a plot."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#grammar-of-graphics",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#grammar-of-graphics",
    "title": "Introduction to ggplot2",
    "section": "Grammar of Graphics",
    "text": "Grammar of Graphics\n\n\n\n“ggplot2: elegant graphics for data analysis”\n\n\n\n\n\n\n\n\ngglot2 is an R package for creating graphics.\nCreated by Hadley Wickham and is considered to be part of the tidyverse.\nCompose graphs by combining independent components: versatile!\nIf you learn the grammar then you will end up creating better graphics in less time."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#create-graphs-for-publications",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#create-graphs-for-publications",
    "title": "Introduction to ggplot2",
    "section": "Create graphs for publications",
    "text": "Create graphs for publications"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#create-graphs-for-publications-1",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#create-graphs-for-publications-1",
    "title": "Introduction to ggplot2",
    "section": "Create graphs for publications",
    "text": "Create graphs for publications\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nTallian, A., Mattisson, J., Samelius, G., Odden, J., Mishra, C., Linnell, J.D., Lkhagvajav, P. and Johansson, O., 2023. Wild versus domestic prey: Variation in the kill-site behavior of two large felids. Global Ecology and Conservation, e02650.\nSemper-Pascual, A., Sheil, D., Beaudrot, L. et al. Occurrence dynamics of mammals in protected tropical forests respond to human presence and activities. Nat Ecol Evol 7, 1092-1103 (2023). https://doi.org/10.1038/s41559-023-02060-6"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#data-structure",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#data-structure",
    "title": "Introduction to ggplot2",
    "section": "Data structure",
    "text": "Data structure\n\n\n\nWide format\n\n\n\n\n\n\n\n\n\nspecies\n2007\n2008\n2009\n\n\n\n\nAdelie\n3750\nNA\nNA\n\n\nAdelie\n3800\nNA\nNA\n\n\nAdelie\n3250\nNA\nNA\n\n\nAdelie\nNA\nNA\nNA\n\n\nAdelie\n3450\nNA\nNA\n\n\nAdelie\n3650\nNA\nNA\n\n\nAdelie\n3625\nNA\nNA\n\n\nAdelie\n4675\nNA\nNA\n\n\nAdelie\n3475\nNA\nNA\n\n\nAdelie\n4250\nNA\nNA\n\n\n\n\n\n\n\n\n\nLong format\n\n\n\n\n\n\n\n\n\nspecies\nyear\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\n\n\n\n\nAdelie\n2007\nTorgersen\n39.1\n18.7\n181\n3750\nmale\n\n\nAdelie\n2007\nTorgersen\n39.5\n17.4\n186\n3800\nfemale\n\n\nAdelie\n2007\nTorgersen\n40.3\n18.0\n195\n3250\nfemale\n\n\nAdelie\n2007\nTorgersen\nNA\nNA\nNA\nNA\nNA\n\n\nAdelie\n2007\nTorgersen\n36.7\n19.3\n193\n3450\nfemale\n\n\nAdelie\n2007\nTorgersen\n39.3\n20.6\n190\n3650\nmale\n\n\nAdelie\n2007\nTorgersen\n38.9\n17.8\n181\n3625\nfemale\n\n\nAdelie\n2007\nTorgersen\n39.2\n19.6\n195\n4675\nmale\n\n\nAdelie\n2007\nTorgersen\n34.1\n18.1\n193\n3475\nNA\n\n\nAdelie\n2007\nTorgersen\n42.0\n20.2\n190\n4250\nNA\n\n\n\n\n\n\n\n\n\n\n\nLong format data.\nEach row is an observation point and each column is a variable.\nData wrangle BEFORE you graph: tidyr::pivot_longer()"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#mapping-components",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#mapping-components",
    "title": "Introduction to ggplot2",
    "section": "Mapping components",
    "text": "Mapping components\n\n\n6 main building blocks, each with their own arguments.\n\n\n\n\n\n\n\n\nggplot(data = data, mapping = aes(x = x, y = y)) +\n  geom_*( ) +\n  coord_*( ) +\n  facet_*( ) +\n  scale_*( ) +\n  theme_*( )"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#ggplot",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#ggplot",
    "title": "Introduction to ggplot2",
    "section": "ggplot()",
    "text": "ggplot()\n\n\n\n\nggplot(data = penguins,\n       mapping = aes(x = body_mass_g, \n                     y = flipper_length_mm)) \n\n\n\n\n\n\n\n\n\n\n\n\nggplot(): graphing space.\ndata\n\ndata frame or tibble in long format.\nreference object for all subsequent arguments and functions.\n\naes()\n\ndefines the axes and uses column names.\nx=x, y=y, some only need x=x.\nx, y included here will be used to build the entire plot."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#geom_-different-types-of-plots",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#geom_-different-types-of-plots",
    "title": "Introduction to ggplot2",
    "section": "geom_* :: different types of plots",
    "text": "geom_* :: different types of plots\n\n\n\nggplot(data = data) +\n  geom_*(aes(x = x, \n             y = y, \n             color = color, # points, lines, error bars\n             shape = shape, # see pch numbers \n             fill = fill), # bars, columns, boxplots, violins\n         alpha=0.3, # transparency \n         shape = pch, # change the point shape; this is a number or vector of numbers\n         position = position_dodge() # bar plots are not stacked\n  ) \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx,y, but some only need x.\nx, y included here used only for this specific geom.\nOther aesthetic arguments: color, fill, shape (pch) take column names.\nStatic arguments outside the aes(): color, fill, shape, alpha (transparency, 0-1), position, size, or linewidth."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#different-types-of-geoms",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#different-types-of-geoms",
    "title": "Introduction to ggplot2",
    "section": "Different types of geoms",
    "text": "Different types of geoms"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#scale_",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#scale_",
    "title": "Introduction to ggplot2",
    "section": "scale_*()",
    "text": "scale_*()\n\n\nLets you change the visual values of a group aesthetic: colors, fills, shapes (scale_manual).\nDiscrete and continuous scales.\nPredetermined color palettes: ggthemes::scale_color_colorblind()\nUse xlab('x-axis title') or ylab('y-axis title') or ggtitle('title)\nlabs(title, subtitle, caption, alt)\nChange x- or y- limits by using x_lims(c(0,1))\nFind more info here"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#scale_-1",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#scale_-1",
    "title": "Introduction to ggplot2",
    "section": "scale_*()",
    "text": "scale_*()\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island), size=3)+\n  ggthemes::scale_color_colorblind()\n\n\n\n\n\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 shape=island), size = 3.5)+\n  scale_shape_discrete() #up to 6 discernible shapes"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#scale_-2",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#scale_-2",
    "title": "Introduction to ggplot2",
    "section": "scale_*()",
    "text": "scale_*()\n\nscale_*() functions can modify:\n\nPosition via scale_x_*() or scale_y_*()\nColors via scale_color_*() and scale_fill_*()\nTransparency via scale_alpha_*()\nSizes via scale_size_*()\nShapes via scale_shape_*()\n\n* can take the following forms:\n\naxes: continuous, discrete, reverse, log10, sqrt, date, time.\nColors & fill: continuous, discrete, manual, gradient, hue, brewer.\nTransparency: continuous, discrete, manual, ordinal, identity, date.\nSizes: continuous, discrete, manual, ordinal, identity, area, date.\nShapes and line types: continuous, discrete, manual, ordinal, identity."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#color-palettes",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#color-palettes",
    "title": "Introduction to ggplot2",
    "section": "Color palettes",
    "text": "Color palettes\n\nAvailable packages with predefined palettes:\n\ncolorblindr\nviridis\nggthemes\nLaCroixPalette\nColorBrewer\nWesAnderson\nMoMa\n\nThis is a comprehensive list of color palettes in r curated by Emil Hvitfeldt."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#color-palette-types",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#color-palette-types",
    "title": "Introduction to ggplot2",
    "section": "Color palette types:",
    "text": "Color palette types:\n\n\n\nGenerally, there are 3 types of palettes:\n\nSequential: data that goes from low to high.\nDiverging: put equal emphasis on mid-range values and extremes.\nQualitative: best for categorical data. Visual differences are given by hues."
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#facet_",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#facet_",
    "title": "Introduction to ggplot2",
    "section": "facet_*()",
    "text": "facet_*()\n\n\nWe have two options facet_wrap() and facet_grid().\nFacets divide a plot into subplots based on a variable in the dataset.\nAllows for comparison across groups.\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  facet_wrap(~island)\n\n\n\n\n\n\n\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  facet_grid(species~island)"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#facet_-1",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#facet_-1",
    "title": "Introduction to ggplot2",
    "section": "facet_*()",
    "text": "facet_*()"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#theme_-pre-established-themes.",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#theme_-pre-established-themes.",
    "title": "Introduction to ggplot2",
    "section": "theme_*(): pre-established themes.",
    "text": "theme_*(): pre-established themes.\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  theme_classic()\n\n\n\n\n\n\n\n\n\n\nModifies the overall visual defaults of a plot.\n\ntitles\nlabels\nfonts\nbackground\ngridlines\nlegends\n\ntheme() and theme_().\n\ntheme_ will have predefined themes.\ntheme will help you customize and personalize the overall look of your plot.\nYou can start with a predefined theme and then customize it with theme_.\n\ntheme() will include element_ functions to modify different areas.\nPredefined ggplot2 themes: theme_classic(), theme_gray(), theme_bw(), theme_linedraw(), theme_light(), theme_dark(), theme_minimal(), theme_void()"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#theme_-modifying-elements-in-the-theme.",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#theme_-modifying-elements-in-the-theme.",
    "title": "Introduction to ggplot2",
    "section": "theme_*(): modifying elements in the theme.",
    "text": "theme_*(): modifying elements in the theme.\n\n\n\nggplot(penguins) +\n  geom_point(aes(x = body_mass_g, \n                 y = flipper_length_mm, \n                 color=island))+\n  theme(plot.background = element_rect(colour = 'green', fill = 'gray80'), \n        panel.background = element_rect(colour = 'orange', size = 3, fill = 'pink'),\n        panel.grid.major = element_line(color = 'blue', size = 2), \n        legend.position = 'bottom', \n        axis.title = element_text(size = 20))"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#theme_-modifying-elements-in-the-theme.-1",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#theme_-modifying-elements-in-the-theme.-1",
    "title": "Introduction to ggplot2",
    "section": "theme_*(): modifying elements in the theme.",
    "text": "theme_*(): modifying elements in the theme.\n\nThis is my favorite theme cheatsheet\nTheme cheatsheet 2\nTheme cheatsheet 3"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#auxiliary-packages",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#auxiliary-packages",
    "title": "Introduction to ggplot2",
    "section": "Auxiliary packages",
    "text": "Auxiliary packages\n\n\nHere is a list with the current ggplot2 geoms\nOther packages with additional geoms, here is a list:\n\n\n\n\n\n\n\ngganimate\nggalt\nggdendro\nggthemes\nggpubr\npatchwork\ncowplot\n\n\n\nggridges\nggcorrplot\nggiraph\nggradar\nWaffle charts\nBeeswarm charts"
  },
  {
    "objectID": "slides/intro_ggplot2/intro_ggplot2.html#free-online-books",
    "href": "slides/intro_ggplot2/intro_ggplot2.html#free-online-books",
    "title": "Introduction to ggplot2",
    "section": "Free online books",
    "text": "Free online books\n\nggplot2: Elegant Graphics for Data Analysis by Hadley Wickham\nR for Data Science by Hadley Wickham\nData Visualization: A Practical Introduction by Kieran Healy\nFundamentals of Data Visualization by Claus Wilke\nR Graph Gallery\nggplot2 Extension Gallery\n\n\n\n\nGuest lecture for Data Management and Analyses for Environmental Science - March 2024"
  },
  {
    "objectID": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html",
    "href": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html",
    "title": "Data Visualization in R",
    "section": "",
    "text": "Learn the basics of ggplot2 grammar and syntax.\nCreate two graphs that will help you understand your covariates and the relationship between them prior to visualizing your occupancy results.\nCreate two graphs that will help you visualize the results of an occupancy analysis.\nCustomize the theme() of your graphs.\nExport graphs as .jpg, .png, .pdf, using ggsave()\n\n\n\n\n\n\n\nNote\n\n\n\nYou will find that we are using the native pipe operator |&gt;. This native pipe is part of base R and has been available since R version 4.1.0 (May 2021). You can choose which pipe to use, either the native pipe |&gt; or the magrittr pipe %&gt;% by going to Tools &gt; Global options &gt; Code."
  },
  {
    "objectID": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#learning-objectives",
    "href": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#learning-objectives",
    "title": "Data Visualization in R",
    "section": "",
    "text": "Learn the basics of ggplot2 grammar and syntax.\nCreate two graphs that will help you understand your covariates and the relationship between them prior to visualizing your occupancy results.\nCreate two graphs that will help you visualize the results of an occupancy analysis.\nCustomize the theme() of your graphs.\nExport graphs as .jpg, .png, .pdf, using ggsave()\n\n\n\n\n\n\n\nNote\n\n\n\nYou will find that we are using the native pipe operator |&gt;. This native pipe is part of base R and has been available since R version 4.1.0 (May 2021). You can choose which pipe to use, either the native pipe |&gt; or the magrittr pipe %&gt;% by going to Tools &gt; Global options &gt; Code."
  },
  {
    "objectID": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#introduction",
    "href": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#introduction",
    "title": "Data Visualization in R",
    "section": "Introduction",
    "text": "Introduction\nWe are going to use the package ggplot2 to create publication ready graphs in r. To begin, we are going to go over a presentation linked below to learn the basic components of ggplot2 and the grammar of graphics. Once we have covered the basics, then we will proceed to the tutorial."
  },
  {
    "objectID": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#presentation",
    "href": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#presentation",
    "title": "Data Visualization in R",
    "section": "Presentation",
    "text": "Presentation\nHere’s a link to the presentation"
  },
  {
    "objectID": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#tutorial-data-visualization-for-an-occupancy-analysis.",
    "href": "slides/uwin_ggplot2/tutorial/tutorial_uwin_ggplot2.html#tutorial-data-visualization-for-an-occupancy-analysis.",
    "title": "Data Visualization in R",
    "section": "Tutorial: Data visualization for an occupancy analysis.",
    "text": "Tutorial: Data visualization for an occupancy analysis.\n\n\n\n\n\n\nNote\n\n\n\nWarning: We pack a lot of information about ggplot into the first graph and it can be overwhelming. The graphs that follow will be easier since you will already be familiar with many of the concepts and we won’t need to explain them as thoroughly.\n\n\nLet’s begin by loading the packages and data that we are going to be working with. We will load the packages using the pacman package, which will automatically download any libraries used in this tutorial that aren’t already downloaded on your computer. Just make sure to install the pacman package if you haven’t already!\n\n#install.packages(\"pacman\")\npacman::p_load(ggplot2, #flexible and professional graphics\n               dplyr, #data manipulation\n               tidyr, #data manipulation\n               ggdist, #visualize distributions\n               ggridges, #visualize distributions\n               ggcorrplot, #visualize correlation \n               colorspace, #provides a range of color palettes\n               cowplot) #allows us to arrange plots \n\nNow let’s load the data that we will be working with.\n\n# Covariates \nland_cover &lt;- readr::read_csv('./data/Chicago_NLCD_landcover.csv')\n\n\n\n\n\n\n\n\n\nLandcover Covariates\n\n\nNLCD landcover classes\n\n\n\nsites\nwater\nlawn_grass\nurban\nforest\nshrub\nherbaceous\nwetland\nag\n\n\n\n\n1\nC04-MBP1\n0.01\n0.01\n0.82\n0.05\n0.00\n0.00\n0.08\n0.00\n\n\n2\nC05-BEA1\n0.08\n0.06\n0.52\n0.04\n0.00\n0.13\n0.11\n0.01\n\n\n3\nC05-BMP1\n0.26\n0.13\n0.32\n0.02\n0.01\n0.04\n0.19\n0.00\n\n\n4\nC05-BMP2\n0.15\n0.00\n0.28\n0.04\n0.01\n0.20\n0.24\n0.00\n\n\n5\nC05-EGG1\n0.07\n0.02\n0.71\n0.03\n0.00\n0.01\n0.13\n0.03\n\n\n6..118\n\n\n\n\n\n\n\n\n\n\n\n119\nS10-LPP0\n0.12\n0.03\n0.19\n0.05\n0.00\n0.05\n0.49\n0.06\n\n\n\n\n\n\n\n\nPre-analysis data visualization: graph 1\nFirst, let’s prepare the data. We want to explore the shape of the data for all our covariates. It’s highly recommended that you do this at first because it will help you understand the way your data is distributed (e.g., if it’s centered around a value, or if there are a lot of zeros (0), etc.)\n\ncovariates &lt;- land_cover |&gt; \n  # select the following columns \n  select(sites, wetland, ag, urban) |&gt;\n  # scale the columns 'wetland', 'ag', 'urban' \n  # mutate() let's us change existing columns or create new ones \n  # across() is a helper function to include several columns to apply the scale() function to\n  mutate(across(c('wetland', 'ag', 'urban'), scale)) |&gt; \n  # mutate_if is a conditional mutate to only transform as vectors all the columns that are numeric\n  mutate_if(is.numeric, as.vector) |&gt; \n  # pivot_longer to go from wide data to long data \n  pivot_longer(cols = c(wetland, ag, urban), # the columns we wish to transform from wide to long\n               names_to = 'covariate', # the name of the column that will contain wetland, ag, urban \n               values_to = 'value') |&gt; # the name of column that will have the cell values for each category\n  # mutate let's us transform the column covariate to a factor \n  mutate(covariate = factor(covariate))\n\nhead(covariates)\n\n# A tibble: 6 × 3\n  sites    covariate   value\n  &lt;chr&gt;    &lt;fct&gt;       &lt;dbl&gt;\n1 C04-MBP1 wetland    0.289 \n2 C04-MBP1 ag        -0.435 \n3 C04-MBP1 urban      0.330 \n4 C05-BEA1 wetland    0.573 \n5 C05-BEA1 ag         0.0128\n6 C05-BEA1 urban     -0.826 \n\n\nNow that our data are prepared, we can graph the covariates that we are interested in (wetland, agriculture, and urbanization) and see how the data are distributed. Remember that we scaled the covariates in the previous step so it makes sense that we can now compare them graphically.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value)) #specify we want the covariate value to be on the x axis\n\n\n\n\n\n\n\n\nYou probably noticed that this chunk of code didn’t actually plot any of our data. That’s because the ggplot(data,aes) argument tells R how to structure our plot and where to look for data, but it doesn’t actually plot any data. This will always be the first line of code when you make a new graph.\nTo actually plot the data, we need to specify a geom, which tells R how to present the data we specified earlier. Note that while we separate arguments within parentheses using commas, we use a plus sign (+) to join together different pieces of code like geoms, themes, etc.\nTo see the distribution of our data values, we’re going to use geom_density_ridges2, which tells R to show us our data as a density estimate.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2()\n\n\n\n\n\n\n\n\nDid you notice that we included parentheses after geom_density_ridges2 but we didn’t put anything inside the parentheses? We can put additional arguments inside the parentheses that control the aesthetics of the plot type. For example, we can scale the height of these density plots to make sure they don’t overlap one another using the scale argument inside the geom_density_ridges2 function.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2(scale = 0.7) #reduce the height of each density plot to 70% of its original height\n\n\n\n\n\n\n\n\nWhile it’s helpful to see the distribution of our variables, it can be difficult to tell what our mean value is for each variable. We can add the quantile argument to tell R to draw the 25%, 50%, and 75% quantiles to our plot. Alternatively we could use specify different quantiles, such as 2.5% and 97.5%, by using the probs argument: quantile(probs = c(0.025,0.975))\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE) #adds quantile lines (default are 25%, 50%, and 75%) \n\n\n\n\n\n\n\n\nSomething important to consider is that the density plots are smoothed estimations. That is, we don’t actually have data points for every location depicted in the plot. To provide a more complete visualization of our data, we can add the actual data points to the plot using the jittered_points argument. If used alone, this plots the points within the density plot itself. We can place the points beneath the density plots using the position argument.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\") #positions the data points below the density plots\n\n\n\n\n\n\n\n\nEven when the points are spread out (aka jittered), they still overlap and blend to form a blob in areas of high point density. We can overcome this by adjusting the opacity of our graphic components using the alpha argument, where a value of 1 is completely opaque and a value of 0 is completely transparent.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5) #adjust opacity of figure components\n\n\n\n\n\n\n\n\nLet’s add some color to our plot! There are actually two main color arguments: color and fill. We use fill to define the color of the inside of an object, such as our density plots. Whereas color changes the color of points and lines, such as the outline of our density plots or the data points plotted below.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value))+ #specify we want the covariate value to be on the x axis\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5, #adjust opacity of figure components\n                       color = \"orange\", #control color of lines and points\n                       fill = \"blue\") #control color of polygons\n\n\n\n\n\n\n\n\nIn the last plot, we put both the color and fill arguments within geom_density_ridges2. That told R to use the same color and fill for all three of our variables. If we want to use separate colors for each variable, we have to tell R upfront. To do this, we include color and fill as arguments inside the aesthetic mapping argument (aes()) of our initiating argument (ggplot()).\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value, #specify we want the covariate value to be\n           color = covariate, #specify the column on which to base coloration\n           fill = covariate))+ #specify the column on which to base coloration\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5) #adjust opacity of figure components\n\n\n\n\n\n\n\n\nThe colors in the previous plot are part of R’s default color palette. This is fine for quick visualizations, but you’ll probably want to choose your own colors. To do this, we use one of the scale commands. Let’s say I want to use the colors of the rainbow. An easy way to do this would be through the scale_fill_manual and scale_color_manual commands, which allow you to set the colors you will use manually.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value, #specify we want the covariate value to be\n           color = covariate, #specify the column on which to base coloration\n           fill = covariate))+ #specify the column on which to base coloration\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5)+ #adjust opacity of figure components\n  scale_fill_manual(values = c(\"red\",\"orange\",\"yellow\"))+\n  scale_color_manual(values = c(\"green\",\"blue\",\"purple\"))\n\n\n\n\n\n\n\n\nWhile scale_fill_manual and scale_color_manual offer a lot of flexibility in color choice, it can be irritating (and messy) to have to add this to every graph you make. This becomes especially problematic if you need to alter your color scheme, requiring you to go back and change the code for every single graph. Thankfully, we can avoid this headache altogether by saving our own color palette!\nWhen building a color palette, it’s helpful to know a little bit about color theory. However, it’s not necessary information to complete this tutorial. If you’d like a quick lesson, expand the section below. If not, feel free to skip it!\n\n\n\n\n\n\nColor theory\n\n\n\n\n\nWhat is color theory?\nColor theory is the study of how different colors work together, and how the use of specific colors and color combinations affect the emotions and perceptions of viewers. As researchers, much of our focus is on collecting and analyzing data. But effective selection of color palettes can be just as important as the story we are trying to tell with our data. Understanding the fundamentals of color theory can quickly and painlessly take your data visualization to the next level.\n\nBefore we talk about how to pick the best color palette for your data, let’s cover some basic principles of color. When we think of a color, we are often thinking of a hue. Conceptually, hues are raw colors without any alterations. The color wheel below shows twelve familiar hues arranged across the warm-cool spectrum.\n\n\n\n\n\n\n\n\n\n\nOf course, we can make slightly different colors by “mixing” white, grey, or black with each hue. The new colors are called tints, tones, or shades, respectively.\n\n\n\n\n\n\n\n\n\n\nFor the rest of this mini-lesson, I’m going to primarily use hues. But be aware that we often rely on tints, tones, and shades to build pleasing and effective color palettes.\nWhile the color wheel’s organization may seem coincidental, it is actually built to allow us to quickly select colors that work well with each other based on their position in the wheel. Depending on what you are trying to communicate, each of these methods of selecting colors has strengths and weaknesses.\n\n\n\n\n\n\n\n\n\n\nUltimately it is up to you to determine which type of color palette best suits your needs. However, we can broadly lump palettes into two categories: qualitative and quantitative.\n\nQualitative and Quantitative Palettes\nWhile most of our data will be inherently quantitative, that does not mean our color palettes should be! A quantitative color palette implies meaning from the colors themselves, and especially from the distance (aka similarity) between two colors. Thus, analogous color palettes tend to be used in cases where the color of the data itself is meant to communicate meaning. Non-analogous palettes, on the other hand, simply imply that datapoints (or features, or objects, etc.) are distinct from one another. In other words, qualitative color palettes are primarily aesthetic while quantitative palettes have inherent meaning. Consider the plots below. Without knowing what the plots are depicting, can you intuit the story that is being told? Do the stories differ based on the color palette that is used?\n\n\n\n\n\n\n\n\n\nLet’s work our way around the plot clockwise starting with the line graph.\n1. Line graphs: Both color palettes work for this figure, but the qualitative palette works better since none of the colors blend with the others. In other words, your eye can easily track all of the lines seperately, whereas they blend together when using the quantitative palette.\n2. Bar graphs: Again, both work (and are aethetically pleasing) in this case. Be careful, however. If you present this at a conference using the quantitative palette and someone asks you “what’s going on with the blue bar?” would you know which bar they were talking about? If you used the qualitative palette, you would know which bar they were refering to with complete certainty.\n3. Maps: These two maps show the counties of Virginia. The colors indicate the area of the county. In the quantitative palette, you can correctly see that counties in the middle of the state (dark) are the largest, while the counties in northeastern portion of the state (light) are smaller. Our brains tend to assume that dark is equal to heavy and large when it comes to data, while light is equal to small. In this case, the colors corroborate that assumption and we can easily (and correctly) read this map. The map using qualitative colors, however, draw your eye to that northeastern pocket and obscure our central counties. More importantly, we have no idea what the relative difference is between each county because the color scale is not continuous. In short, it is much easier to read a trend when the quantitative palette is used rather than the qualitative palette.\n4. Likert plots: The Likert scale runs from one to seven and asks people to rank how much they agree with a statement. Likert scores, as well as any other ranking system, yield data with an inherent order. As a result, the qualitative palette is once again more intuitive than the qualitative palette.\n5. Pie charts: In general, it’s best practice not to use a pie chart to visualize your data since humans have a difficult time discerning area of circles. Here, the pie charts use the exact same data as the bar graphs. It is generally easier for people to see the difference between the larger two bars in the graph than it is for people to see the difference between the larger two slices of pie. Regardless, this is an instance where qualitative colors do a better job than quantitative colors since pie charts break data up by categories. There is (presumably) no inherent relationship beween categories, and thus our use of color is primarily to differentiate categories rather than imply a relationship between them.\n\nMixing Qualitative and Quantitative Palettes\nThere are some instance where using both types of palettes makes sense. In the last section, we discussed how the colors in a pie chart are mean to primarily separate data groups rather than imply a relationship between them. However, if you have sub-categories of data, you may wish to use colors to imply that each of those subcategories has a relationship to the larger category. In this instance, you can use a qualitative palette for the major categories, but quantitative palettes based off the qualitative colors to further separate data. For instance, the example below shows three subgroups in the blue category, two in the red, etc.\n\n\n\n\n\n\n\n\n\n\nYou may also want to use color to highlight one particular aspect of your data. In that case, you can use a subtle quantitative palette to mute the background data, while pulling an accent color from a qualitative palette to highlight your main finding.\n\n\n\n\n\n\n\n\n\n\nIn the end, relying on color theory can help you make effective visualizations that correctly communicate your findings. But remember, these are just suggestions. Sometimes it’s okay to bend the rules! Also, if you don’t have time to create your own custom palette using color theory, feel free to use one of the tried-and-true pre-made palettes available in packages like viridis or colorspace.\n\n\n\nWe are going to be using color to differentiate categories so we will create a qualitative color palette. You could also use a predefined color palette from packages like viridis or colorspace.\nPreviously, we simply used the name of a color in quotes. R recognizes 657 color names, so we’re not short on color choices. But we retain more control of our color choices if we use A HEX code instead. HEX codes are simply special codes for a specific color. This approach gives us a lot more flexibility than simply writing “blue.” If you need help translating a color into a HEX code, Google has a built in color picker that allows you to select a color from a map and copy the HEX code.\n\nmy_colors &lt;- c('#222f5b', '#5d5d5d', '#946b2d', '#4f3b3b') #create a vector containing our specified colors\n\nNow instead of typing out a vector of colors, we simply provide our named color vector to scale_fill_manual or scale_color_manual.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value, #specify we want the covariate value to be\n           color = covariate, #specify the column on which to base coloration\n           fill = covariate))+ #specify the column on which to base coloration\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5)+ #adjust opacity of figure components\n  scale_fill_manual(values = my_colors)+ #feed R our custom color palette\n  scale_color_manual(values = my_colors) #feed R our custom color palette\n\n\n\n\n\n\n\n\nYou might have noticed that all of our plots so far have included a grey background with a white grid. You may have also noticed a legend that, although not incorrect, is probably not something you would want to include in a publication.\nTo remove the background, we will use the theme command, which has a number of arguments that specify how the non-data components of the plot are drawn. We could spend an entire day going over all the components you can adjust via theme. Instead, we’ll cover a few and let you explore the rest on your own. There are also several pre-set themes that you can use and/or tweak. We’ll be building off of theme_classic for our plot.\nTo change the legend, we use the key_glyph argument inside of our geom. There are also many variations we could discuss here. Instead, we’re just going to show one.\n\nggplot(data = covariates, #specify our data source\n       aes(y = covariate, #specify aesthetic mapping by stating we want our covariate categories to be on the y axis\n           x = value, #specify we want the covariate value to be\n           color = covariate, #specify the column on which to base coloration\n           fill = covariate))+ #specify the column on which to base coloration\n  geom_density_ridges2(scale = 0.7, #reduce the height of each density plot to 70% of its original height\n                       quantile_lines = TRUE, #adds quantile lines (default are 25%, 50%, and 75%)\n                       jittered_points = TRUE, #adds data points to the plot in a scattered pattern so they don't overlap each other \n                       position = \"raincloud\", #positions the data points below the density plots\n                       alpha = .5, #adjust opacity of figure components\n                       key_glyph = draw_key_polygon\n  )+ #changes the legend symbol to simply a polygon (box) of color\n  scale_fill_manual(values = my_colors)+ #feed R our custom color palette\n  scale_color_manual(values = my_colors)+ #feed R our custom color palette\n  theme_classic()+ # we are modifying some of the elements of theme_classic. Note that you do not include additional arguments within the parentheses of a pre-set theme!\n  theme(\n    panel.background = element_rect(fill = 'white'), #change the background from grey to white (you could also use fill = \"transparent\")\n    legend.position = 'bottom', #tells R to put out legend at the bottom of the plot (you could also use legend.position = \"none\" to remove the legend)\n    legend.title = element_blank(), #element_blank tells R to ignore this component of the graph.\n    axis.title.x = element_text(face = 'bold', #makes text of our x axis title bold\n                                size = 14, #adjust size of x axis title\n                                hjust = 0.5, #adjust the horizontal position of x axis title (places it in the middle, or half (.5) way)\n                                margin = margin(t=0.5, #adjust space around text\n                                                unit = 'cm')), #specify unit of value provided above\n    axis.title.y = element_text(face = 'bold', #makes text of our y axis title bold\n                                size = 14, #adjust size of y axis title\n                                hjust = 0.5, #adjust the horizontal position of x axis title (places it in the middle, or half (.5) way)\n                                angle = 90, #orients y axis title at a 90 degree angle so it runs paralell to the axis\n                                margin =  margin(r=0.5, #adjust space around text\n                                                 unit = 'cm')),#specify unit of value provided above\n    axis.text = element_text(size = 12),  #adjust size of text of actual values (covariates and numbers)\n    plot.margin = margin(0.5, 0.5, 0.5, 0.5, unit = 'cm'), #adjust white space around the plot\n    legend.text = element_text(size = 12) #adjust text size of the legend (aka key)\n  )\n\n\n\n\n\n\n\n\n\n\nCorrelation plot: graph 2\nNow that we know the distribution of our covariates, we also have to know if any of them are correlated. Let’s create a plot that visualizes the Pearson correlation coefficients.\nFirst, we’ll create a correlation matrix using the cor function.\n\ncor_mat &lt;- cor(land_cover[,c(\"ag\", \"urban\", \"wetland\")]) #create correlation matrix for our three variables\n\ncor_mat &lt;- round(x = cor_mat,\n                 digits = 2) #round values to 2 decimal places\n\ncor_mat\n\n           ag urban wetland\nag       1.00 -0.46    0.28\nurban   -0.46  1.00   -0.72\nwetland  0.28 -0.72    1.00\n\n\nNow let’s create our correlation plot. For this graph, we will be using an auxilary package that uses ggplot2 but has its own commands for plotting correlation plot called ggcorrplot.\n\n#Note that we type \"ggcorrplot::\" before the command so R knows that our command is from a specific package. This is not always needed, but good practice.\nggcorrplot::ggcorrplot(cor_mat) #feed our correlation matrix to the plot\n\n\n\n\n\n\n\n\nSince we only specified our data, but not any additional arguments, the above plot used the default settings for this type of plot. Under the default settings, we can see that warmer colors indicate strong positive correlation between variables (correlation coeficients closer to 1), whereas cooler colors indicate strong negative correlation between variables (correlation coeficients closer to -1). White indicates no correlation exists between two variables.\nGenerally when we are looking into correlation we want to flag any pair of variables with a correlation coefficient above a pre-determined threshold (usually 0.7). Unfortunately most of us aren’t able to exactly match the color of a square to its position in the legend. Instead, we can add labels to the plot so our eyes quickly can scan for colors that indicate we are approaching our threshold, then read the exact correlation coefficients for those pairs of covariates.\n\nggcorrplot::ggcorrplot(cor_mat,#specify our data\n                       lab = TRUE, #tell R to include the correlation coefficient (as a label)\n                       lab_col = \"black\", #specify the color of our labels\n                       lab_size = 6) #specify the text size of our labels\n\n\n\n\n\n\n\n\nYou may have noticed that the upper left half of the plot is exactly the same as the lower right half of the plot. That’s because our variables are arranged in the exact same way on both the x and y axes.\nIn truth, you will probably never try to publish a correlation plot so if this format works for you, great! But it seeing duplicated information is overwhelming, we can add type = \"lower\" to reorder the x and y axes. In doing so, we remove the diagonal of perfect correlation, and erase the mirrored halves. Again, this isn’t necessary but can help make interpreting the plot easier.\n\nggcorrplot::ggcorrplot(cor_mat,#specify our data\n                       lab = TRUE, #tell R to include the correlation coefficient (as a label)\n                       lab_col = \"black\", #specify the color of our labels\n                       lab_size = 6, #specify the text size of our labels\n                       type = \"lower\")#re-order x and y axes and remove duplicated information\n\n\n\n\n\n\n\n\nAgain, since you will never try to publish this plot, the default colors are probably sufficient. But for the sake of learning, let’s change our color palette.\nSeveral packages offer pre-defined palettes, such as, viridis,paletteer, RColorBrewer, and colorspace. For this example we’re going to work with RColorBrewer. You can explore the 97 palettes offered by colorspace by expanding the section below, or you can trust we’re picking a good palette!\n\n\n\n\n\n\nPre-set color palettes\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nList of 2\n $ aspect.ratio   : num 8.08\n $ legend.position: chr \"none\"\n - attr(*, \"class\")= chr [1:2] \"theme\" \"gg\"\n - attr(*, \"complete\")= logi FALSE\n - attr(*, \"validate\")= logi TRUE\n\n\n\n\n\nIn this case, we need to use a sequential palette or a diverging palette because we want to highlight extreme values and bring less attention to smaller values.\nFor this example, we’ll use the diverging color palette ‘Vik’ because it is a standard divergent color palette. This means our correlation plot will have white for values close to 0 (aka non-correlated) and increase in color intensity as correlation increases.\n\nggcorrplot::ggcorrplot(cor_mat,#specify our data\n                       lab = TRUE, #tell R to include the correlation coefficient (as a label)\n                       lab_col = \"black\", #specify the color of our labels\n                       lab_size = 6, #specify the text size of our labels\n                       type = \"lower\")+#re-order x and y axes and remove duplicated information\n  scale_fill_continuous_diverging(palette = \"Vik\") #specify color palette from colorspace on a continuous gradient\n\n\n\n\n\n\n\n\nAlternatively, we could build our own color palette creating a named vector of colors which represent our extreme, low, and opposite extreme values.\n\nmy_ramp &lt;- c('#bf0d3e', 'white' , '#16537e')\n\nggcorrplot::ggcorrplot(cor_mat,#specify our data\n                       lab = TRUE, #tell R to include the correlation coefficient (as a label)\n                       lab_col = \"black\", #specify the color of our labels\n                       lab_size = 6, #specify the text size of our labels\n                       type = \"lower\",#re-order x and y axes and remove duplicated information\n                       col = my_ramp) #feed R my custom palette\n\n\n\n\n\n\n\n\nFinally, let’s change a few components of the theme just for practice\n\nggcorrplot::ggcorrplot(cor_mat,#specify our data\n                       lab = TRUE, #tell R to include the correlation coefficient (as a label)\n                       lab_col = \"black\", #specify the color of our labels\n                       lab_size = 6, #specify the text size of our labels\n                       type = \"lower\",#re-order x and y axes and remove duplicated information\n                       col = my_ramp)+ #feed R my custom palette\n  theme(legend.title = element_text(face = 'bold', #Bold the legend title\n                                    \n                                    hjust = 0.5),  #Center legend title: 0=left, 1=right\n        axis.text.x = element_text(face = 'bold', #Bold the axis text (variable names)\n                                   \n                                   angle = 0,  # Control the angle of the x-axis labels so they aren't angled\n                                   \n                                   hjust = 0.5, #Center the x-axis labels: 0=left, 1=right      \n                                   \n                                   size = 12, #Font size for x-axis labels  \n                                   \n                                   color = \"black\"), #Color for x-axis labels  \n        axis.text.y = element_text(face='bold',\n                                   size = 12,\n                                   color = 'black'), \n        \n        plot.margin = margin(1, 1, 1, 1, unit = 'cm'))+ #Margins around the plot, order is top, right, bottom, left, remember 'trouble'\n  \n  guides(fill = guide_legend(title = 'Correlation')) #With guides, you can modify the legend title, or else it automatically takes the name of the column 'value'\n\n\n\n\n\n\n\n\n\n\nPost-analysis data visualization: prediction plots graph 3\nGraphs 1 and 2 were visualizations of raw data that are common to evaluate before fitting a model. Graphs 3 and 4 will now teach you how to visualize the results of your model. For consistency’s sake, we will be using the output from the first occupancy tutorial. We won’t go over or show the code here. Rather, we’re assuming you have the output handy.\nWe will begin by plotting a response plot, which shows the relationship between the dependent variable and an independent variable. To build this plot, we need to create a prediction data frame that tells us what our dependent variable’s value is over a range of possible independent variable values. Make sure your columns have the same names as the ones you included in your model.\nFirst, let’s explore the range of our covariates, both scaled and non-scaled.\n\n\n\n\n\ncovariates\nmin\nmax\n\n\n\n\nag\n0.00\n0.16\n\n\nurban\n0.16\n1.00\n\n\nwetland\n0.00\n0.38\n\n\nag_scale\n-0.35\n5.30\n\n\nurban_scale\n-2.45\n0.99\n\n\nwetland_scale\n-0.50\n3.77\n\n\n\n\n\n\n\nNow, we want to use our real values (unscaled) to make to create a sequence of (scaled) values that we can use to make predictions on.\n\n#Specify the range of each our variables (See table above)\nag_range &lt;- c(0, 0.16)\nurban_range &lt;- c(0.16, 1)\nwetland_range &lt;- c(0, 0.38)\n\nnew_df &lt;- data.frame( #Create a prediction data frame\n  ag_scale = seq(ag_range[1], ag_range[2], length.out = 100), #create 100 agriculture values that range between the smallest and largest values found in our dataset\n  urban_scale = 0, #Because we are only evaluating the effect of one variable at a time, hold this at zero for all 100 values\n  wetland_scale = 0 #Because we are only evaluating the effect of one variable at a time, hold this at zero for all 100 values\n)\n\ndat_pred &lt;- new_df #Rename our data frame\ndat_pred$ag_scale &lt;- (dat_pred$ag_scale - mean(siteCovs_df$ag)) / sd(siteCovs_df$ag) #Scale agriculture values by mean-centering and dividing by the standard deviation\n\nNow we are ready to start making predictions with one of our covariates while the other ones remain at 0.\n\n# using the function predict in package unmarked we put our model m1 and \n# specify type as state for occupancy. We would use 'det' for detection, \npred_ag &lt;- unmarked::predict(m1, type = 'state', newdata = dat_pred) \n\n# Now with our predicted data frame we will create a new column called ag which \n# will have the scaled covariate we want to make predictions with\n# then we simply relocate that column to be the first column \npred_ag &lt;- pred_ag |&gt; \n  mutate(ag = new_df$ag_scale) |&gt; \n  relocate(ag)\nhead(pred_ag)\n\n           ag Predicted         SE     lower     upper\n1 0.000000000 0.5854279 0.06678247 0.4515990 0.7077341\n2 0.001616162 0.5889485 0.06493721 0.4585662 0.7079310\n3 0.003232323 0.5924600 0.06346754 0.4647960 0.7087535\n4 0.004848485 0.5959621 0.06239414 0.4702352 0.7102373\n5 0.006464646 0.5994544 0.06173126 0.4748441 0.7124050\n6 0.008080808 0.6029367 0.06148531 0.4785995 0.7152636\n\n\nLet’s start making plots! We’ll start with plotting the effect of agriculture.\n\nggplot(pred_ag, #Specify data\n       aes(x = ag, y = Predicted))+ #Specify aesthetic mapping\n  geom_line(linewidth = 1, #Specify the width of the line\n            color = 'black') #Specify the color of the line\n\n\n\n\n\n\n\n\nWe’re off to a good start! Notice that we used a new geom here: geom_line(). While this geom shows us our predicted outcome using a point estimate, it doesn’t show us uncertainty. To add our 95% confidence intervals, we use geom_ribbon(), which is similar to geom_line() but adds a polygon to the plot around the line.\n\nggplot(pred_ag, #Specify data\n       aes(x = ag, y = Predicted))+ #Specify aesthetic mapping\n  geom_line(linewidth = 1, #Specify the width of the line\n            color = 'black')+ #Specify the color of the line\n  geom_ribbon(aes(ymin = lower, #Specify the column that holds the lower estimate of our 95%CI\n                  ymax = upper), #Specify the column that holds the upper estimate of our 95%CI\n              fill = '#B8BADD')\n\n\n\n\n\n\n\n\nUh oh…when we added our confidence interval it covered up our line. That’s because order matters for graphical objects only. That means we could specify the theme in the first line of code or the last line of code and it wouldn’t make a difference. But when it comes to objects being plotted within the graph, the first object listed in the code is the first object plotted in the graph. In the last graph, we plotted the line before the ribbon. As a result, the ribbon was placed on top of the line. We can switch this around by re-ordering our code to make the ribbon come first and the line come second.\n\nggplot(pred_ag, #Specify data\n       aes(x = ag, y = Predicted))+ #Specify aesthetic mapping\n  geom_ribbon(aes(ymin = lower, #Specify the column that holds the lower estimate of our 95%CI\n                  ymax = upper), #Specify the column that holds the upper estimate of our 95%CI\n              fill = '#B8BADD')+\n  geom_line(linewidth = 1, #Specify the width of the line\n            color = 'black') #Specify the color of the line\n\n\n\n\n\n\n\n\nNow that looks better! Now that our graphic objects look good, let’s adjust the axes.\n\nggplot(pred_ag, #Specify data\n       aes(x = ag, y = Predicted))+ #Specify aesthetic mapping\n  geom_ribbon(aes(ymin = lower, #Specify the column that holds the lower estimate of our 95%CI\n                  ymax = upper), #Specify the column that holds the upper estimate of our 95%CI\n              fill = '#B8BADD')+\n  geom_line(linewidth = 1, #Specify the width of the line\n            color = 'black')+ #Specify the color of the line\n  \n  xlab('Proportion of Agriculture')+ #xlab changes the x-axis title \n  ylab('Occupancy')+ #ylab changes the x-axis title \n  scale_y_continuous(limits= c(0,1), #set the y axis to go between zero and one\n                     breaks = seq(0, 1, by =0.2)) #set the y axis to show an axis tick in increments of 0.2\n\n\n\n\n\n\n\n\nLastly, let’s adjust our theme. Particularly, let’s get rid of the grey background and add some horizontal lines that will help us see changes on the y axis a bit easier.\n\nag_plot &lt;- ggplot(pred_ag, #Specify data\n                  aes(x = ag, y = Predicted))+ #Specify aesthetic mapping\n  geom_ribbon(aes(ymin = lower, #Specify the column that holds the lower estimate of our 95%CI\n                  ymax = upper), #Specify the column that holds the upper estimate of our 95%CI\n              fill = '#B8BADD')+\n  geom_line(linewidth = 1, #Specify the width of the line\n            color = 'black')+ #Specify the color of the line\n  \n  xlab('Proportion of Agriculture')+ #xlab changes the x-axis title \n  ylab('Occupancy')+ #ylab changes the x-axis title \n  scale_y_continuous(limits= c(0,1), #set the y axis to go between zero and one\n                     breaks = seq(0, 1, by =0.2))+ #set the y axis to show an axis tick in increments of 0.2\n  theme_classic()+ #Let's modify a few elements of theme_classic \n  theme(\n    panel.grid.minor.y = element_line(color = 'gray70', #Change the color of the horizontal grid lines on y axis\n                                      size = 0.5), #Control the width of the line \n    panel.grid.major.y = element_line(color = 'gray70', #Change the color of the horizontal grid lines on y axis\n                                      size = 0.5), #Control the width of the line \n    axis.ticks.x = element_line(size = 1), #Change the size (width) of each tick on x-axis (ticks are the small segments on the axis that denote changes in the axis value)\n    axis.ticks.length.x = unit(0.2, 'cm'), #Change the length of the ticks on x-axis \n    axis.ticks.y = element_blank(), #Use element_blank to remove tick lines on y-axis \n    axis.line.x = element_line(size=0.75),  #Size (line width) of the x-axis line above the ticks\n    axis.line.y = element_blank(), #Use element_blank to remove the y-axis line \n    axis.text.x = element_text(color = 'black', #Control the color of all text (numbers) on the x axis\n                               size = 10, #Control the font size of text on the x axis (note that this does not directly equate to 10-point font in a word processor)\n                               margin = margin(t=0.3, #Use margin(t=) for the x-axis text to change the distance above numbers \n                                               unit='cm')), #specify the unit for the above-listed margin size\n    axis.text.y = element_text(color = 'black', #See comments for x axis\n                               size = 10, margin = margin(r=0.3, \n                                                          unit='cm')), \n    axis.title.x = element_text(size = 14, #Adjust font size of x axis title\n                                margin = margin(t=0.7, unit='cm')), #Change white space around the x axis title\n    axis.title.y = element_text(size = 14, #Adjust font size of y axis title\n                                margin = margin(r=0.7, unit='cm')), #Change white space around the y axis title\n    plot.caption = element_text(face = 'italic', #Set text in plot caption to be italicized\n                                size = 10, #Set font size\n                                margin = margin(t=1, unit = 'cm')), #Control surrounding white space\n    # change the outer margin of the plot\n    plot.margin = margin(0.7,0.7,0.7,0.7, unit='cm') #Control white space around the entire plot\n  )\n\nag_plot\n\n\n\n\n\n\n\n\nThis looks great! A quick note on the horizontal lines behind the plot: theme_classic() removes all gridlines and colored background panels. In this case, we opted to add them back in by using the panel.grid.minor.y and panel.grid.major.yarguments. If you scroll up to look at the grey background in our plot before we adjusted the theme, you’ll notice that the horizontal lines consist of alternating thicker and thinner lines. The difference is subtle, but the thicker lines are the major lines, while the thinner lines are the minor lines. By using the size argument in both panel.grid.minor.y and panel.grid.major.y, we removed this difference and effectively made both types of lines into the same type of line (aesthetically). Despite looking the same, the code requires that we handle them separately.\nYou may have noticed that we started our code slightly differently this time. Instead of simply writing the code for a plot, we created a named object using the assignment operator. That is, instead of this:\n\nggplot(data,aes)+\n  geom()+\n  theme()\n\nwe did this:\n\ngraph_name &lt;- ggplot(data,aes)+\n  geom()+\n  theme()\n\nNaming our plot allows us to save it in our environment for later use. One advantage of this is that we can create several plots, then put them together by calling them by name.\nFor instance, our occupancy model has three variables, but we only made a graph for one of them and called it ag_plot. To show how we would put several plots together, we’ll work with plots for the other two variables called wetland_plot and urban_plot.\nTo put these three plots together we will use the cowplot package, which allows us to treat the plotting space as a canvas, and each of our graphical objects as components of a collage.\nThe easiest way to arrange plots is to use the plot_grid function, which arranges your plots automatically.\n\nlibrary(cowplot)\n\nall.plots &lt;- plot_grid(ag_plot, \n          urban_plot,\n          wetland_plot, \n          labels = c('A.', 'B.', 'C.'), \n          nrow = 1)\n\nall.plots\n\n\n\n\n\n\n\n\nThis plot looks terrible because it fits to the screen’s dimensions without considering its own dimensions. Fortunately we can export it and make the resulting image file wider.\n\nggsave(plot = all.plots, #Specify the (named) plot that you wish to save\n       filename = './images/all.plots_2.png', #Specify the file path that should be used to save this image (note that \"./\" is a shortcut that tells R to save the file to your current working directory.)\n       dpi = 300, #Specify the resolution (dots per linear inch; 300 is the minimum for graphics you wish to publish)\n       scale = 0.75,\n       width = 16, #Specify the width of the image\n       height = 8, #Specify the height of the image\n       units = 'in') #Specify the units of the previous two arguments\n\n\n\n\nPost-analysis: coefficient plot graph 4\nNow we are going to plot the coefficients of our model. For that, we need to extract the coefficient estimates of our model. This is a little tricky because we are dealing with S4 objects (a specific type of data in R) but in the end we will have a nice data frame with our coefficients that we can then put into a nice graph.\n\nsummary_m1 &lt;- summary(m1) #Extract coefficient estimates from model m1\n\n\nCall:\noccu(formula = ~1 ~ ag_scale + urban_scale + wetland_scale, data = raccoon_occ)\n\nOccupancy (logit-scale):\n              Estimate    SE      z P(&gt;|z|)\n(Intercept)      0.433 0.258  1.675  0.0939\nag_scale         0.249 0.365  0.682  0.4950\nurban_scale     -0.313 0.407 -0.770  0.4412\nwetland_scale   -0.289 0.371 -0.778  0.4367\n\nDetection (logit-scale):\n Estimate   SE    z P(&gt;|z|)\n     0.49 0.15 3.26 0.00111\n\nAIC: 362.5905 \nNumber of sites: 67\noptim convergence code: 0\noptim iterations: 25 \nBootstrap iterations: 0 \n\n#Create a data frame with three columns (named 'names_', 'estimates' and 'se' where...\nmodel_df &lt;- data.frame(names_ = m1@estimates@estimates$state@estimates, #the names column is the stored name of each variable\n                       estimates = summary_m1$state$Estimate, #the estimates column is the point estimate of each regression coefficient\n                       se = summary_m1$state$SE) |&gt; #the se column is the standard error estimated in the regression process\n  \n  \n  tibble::rownames_to_column(var = 'names') |&gt; #Move the rownames to a column \n  select(!names_) |&gt; #We have the names duplicated, let's remove 'names_'\n  # let's calculate lower and upper 95%CI \n  mutate(lower = estimates - (se*1.96), #Calculate 95% confidence intervals using the standard error\n         upper = estimates + (se*1.96)) #Calculate 95% confidence intervals using the standard error\n\nmodel_df\n\n          names  estimates        se       lower     upper\n1   (Intercept)  0.4329113 0.2584263 -0.07360417 0.9394268\n2      ag_scale  0.2493874 0.3654457 -0.46688614 0.9656610\n3   urban_scale -0.3131325 0.4065844 -1.11003793 0.4837730\n4 wetland_scale -0.2886517 0.3710924 -1.01599280 0.4386894\n\n\nWhat a beautiful data frame! You’ll notice that the first parameter shown is the model intercept. This is obviously an important term in our model, but we generally don’t visualize the intercept unless there’s a specific ecological rationale for doing so. That said, let’s remove it from our data frame.\n\nmodel_df &lt;- model_df[-(which(model_df$names %in% \"(Intercept)\")), ] #remove any rows whose value in the \"names\" column matches \"(Intercept)\"\n\nmodel_df\n\n          names  estimates        se      lower     upper\n2      ag_scale  0.2493874 0.3654457 -0.4668861 0.9656610\n3   urban_scale -0.3131325 0.4065844 -1.1100379 0.4837730\n4 wetland_scale -0.2886517 0.3710924 -1.0159928 0.4386894\n\n\nNow that our data frame only contains our parameters of interest, let’s make a nice plot with our point estimates!\n\nggplot(data = model_df, #Specify data\n       aes(x = estimates, y = names))+ #Specify our aesthetic mapping (axes)\n  geom_point(size = 3) #Tell R to plot a point for each estimate\n\n\n\n\n\n\n\n\nThis does a good job showing us how each of our estimates compare to eachother, but the information in this graph is pretty limited without also showing the uncertainty around each estimate. Let’s overcome that by adding our 95% confidence intervals using geom_errorbar().\n\nggplot(data = model_df, #Specify data\n       aes(x = estimates, y = names))+ #Specify our aesthetic mapping (axes)\n  geom_point(size = 3)+ #Tell R to plot a point for each estimate\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2) #Set the height of the vertical ticks at the end of each error bar\n\n\n\n\n\n\n\n\nNow let’s tinker with our axis limits and theme to make this a little more polished.\n\nggplot(data = model_df, #Specify data\n       aes(x = estimates, y = names))+ #Specify our aesthetic mapping (axes)\n  geom_point(size = 3)+ #Tell R to plot a point for each estimate\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2)+ #Set the height of the vertical ticks at the end of each error bar\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nNice! This gives us a much better understanding of our estiamtes!\nAs we think about color, it’s worth noting that the color for our points and error bars are controlled seperately even though they look like the same object visually. That said, if you manually specify a color, be sure to inlude the argument within both geom_point and geom_errorbar.\nSomething else we should consider when thinking about color is what we intend each color to represent. Specifically, are we adding color to help us communicate our message, or to make it look pretty? We should always strive to meet an aesthetic standard when publishing a data visualization, but our message should always be more important than our aesthetics. A good excercise when thinking about color is to ask yourself “how does this help the viewer understand what I’m trying to say?”\nWith that in mind, although it is tempting to assign each variable a different color, does that add anything to our message? Consider that each variable is already plotted seperately from the others, and has a label. The seperation and label already communicate that each variable is distinct. Adding colors probably won’t add to that message, and might actually detract as the reader tries to understand what the colors mean and how that is different than the seperation already shown by the labels.\nIf you’re thinking “but wait - the same logic applies to graph 1 but we used different colors there anyway” then you are absolutely right. We probably should have limited our use of color in that graph to reduce the viewer’s mental load. We mostly used color there to illustrate how to assign colors in ggplot2. But have no fear, there are still a couple fun things we can do to make our plot look more appealing without detracting from our message. For instance, we can overlay an additional set of smaller white points on top of our existing plots to make our points look hollow.\n\nggplot(data = model_df, #Specify data\n       aes(x = estimates, y = names))+ #Specify our aesthetic mapping (axes)\n  geom_point(size = 3.5)+ #Tell R to plot a point for each estimate\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2)+ #Set the height of the vertical ticks at the end of each error bar\n  geom_point(size = 2 ,#Tell R to plot a point for each estimate, but make the size smaller than the original points\n             color = \"white\")+ #Use a different color to differentiate this point from the origianl points \n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nAlternatively, we could change the shape of our points by adding the shape argument to geom_point().\n\nggplot(data = model_df, #Specify data\n       aes(x = estimates, y = names))+ #Specify our aesthetic mapping (axes)\n  geom_point(size = 3.5, #Tell R to plot a point for each estimate\n             shape = 17)+ #set point shape to a triangle \n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2)+ #Set the height of the vertical ticks at the end of each error bar\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nAgain, it wouldn’t be super helpful to use a different shape for each variable. But it might be appropriate to do that in certain circumstances. For example, if we wanted to plot the results from two different species side by side, we could use a different shape to denote each species.\n\nmodel_df$species &lt;- \"raccoon\" #specify the species we've been working with\n\n#make up some new data\nnew.data &lt;-  data.frame(names = c(\"ag_scale\",\"urban_scale\",\"wetland_scale\"),\n                        estimates = c(0.65,-0.23,0.9),\n                        se = c(0.12,0.33,0.14))\nnew.data$lower &lt;- new.data$estimates - (new.data$se*1.96)\nnew.data$upper &lt;- new.data$estimates + (new.data$se*1.96)\nnew.data$species &lt;- \"bigfoot\"\n\n#combine existing data with new data\nnew.df &lt;- rbind(model_df, new.data)\n\nggplot(data = new.df, #Specify data\n       aes(x = estimates, y = names, #Specify our aesthetic mapping (axes)\n           shape= factor(species)))+ \n  geom_point(size = 3)+ #Tell R to plot a point for each estimate\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2)+ #Set the height of the vertical ticks at the end of each error bar\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nWhoops! In the previous plot we added shape = factor(species) to aes(), which tells R to change the shape based on the value in the “species” column. But because the variables are still the same between the two species, they are plotted along the same axis. As a result, our data are plotted on top of each other and we can’t differentiate the 95% confidence intervals. Let’s fix that by adjusting the position of the points and error bars via the position argument.\n\nggplot(data = new.df, #Specify data\n       aes(x = estimates, y = names, #Specify our aesthetic mapping (axes)\n           shape= factor(species)))+ \n  geom_point(size = 3, #Tell R to plot a point for each estimate\n             position = position_dodge(0.2))+ #Offset our points so they don't overlap\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2, #Set the height of the vertical ticks at the end of each error bar\n                position = position_dodge(0.2))+ #Offset our error bars so they don't overlap\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nAlternatively, we could use the same point shape for both species and change the color instead. If you’re thinking “but you said not to do that,” you’re absolutely right. When we discussed varying the color earlier, the different colors carried no actual meaning. But in cases like this, different colors mean different species and are thus appropriate. Just note that we swap aes(shape = factor(species)) for aes(color = factor(species)).\n\nggplot(data = new.df, #Specify data\n       aes(x = estimates, y = names, #Specify our aesthetic mapping (axes)\n           color = factor(species)))+ \n  geom_point(size = 3, #Tell R to plot a point for each estimate\n             position = position_dodge(0.2))+ #Offset our points so they don't overlap\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2, #Set the height of the vertical ticks at the end of each error bar\n                position = position_dodge(0.2))+ #Offset our error bars so they don't overlap\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n  theme_classic() #specify our desired theme (no need to further adjust, you can simply use a pre-set theme as is if you'd like)\n\n\n\n\n\n\n\n\nJust like before, R will use its default color palette unless you specify alternate colors. In our final plot, we’ll specify the colors we want using scale_color_manual, give our variables more formal names using scale_y_discrete, and modify our theme to remove the legend title.\n\npoint.est_plot &lt;- ggplot(data = new.df, #Specify data\n                         aes(x = estimates, y = names, #Specify our aesthetic mapping (axes)\n                             color = factor(species)))+ \n  geom_point(size = 3, #Tell R to plot a point for each estimate\n             position = position_dodge(0.2))+ #Offset our points so they don't overlap\n  geom_errorbar(aes(xmin = lower, #Use the value in the column named \"lower\" as the lower extreme for each error bar\n                    xmax = upper), #Use the value in the column named \"upper\" as the upper extreme for each error bar\n                linewidth = 1, #Set the thickness of the error bar line\n                width = .2, #Set the height of the vertical ticks at the end of each error bar\n                position = position_dodge(0.2))+ #Offset our error bars so they don't overlap\n  scale_color_manual(values = c(\"cornflowerblue\", '#D35C4B'))+ #specify the colors we would like to use\n  xlim(-1.5,1.5)+ #Set lower and upper limits of the x axis\n  xlab(\"Estimated Coefficient\")+ #Specify the x axis label\n  ylab(\"Variable\")+ #Specify the y axis label\n    scale_y_discrete(labels = c(\"agriculture\",\"urban\",\"wetland\")) + #Supply R with the names we would like to use instead of the column names\n  theme_classic()+ #specify our desired theme\n  theme(legend.title = element_blank(), \n        axis.title = element_text(face = 'bold', size = 14), \n        axis.text = element_text(size =12)) #element_blank tells R to ignore this component of the graph.)\n\n\npoint.est_plot\n\n\n\n\n\n\n\n\nDo you remember how we used the plot_grid() function from the cowplot package earlier? That function is great for automatically arranging plots, but we can exercise more control by using the ggdraw function, which allows us to specify the location of each plot within the larger figure using the draw_plot() function.\nLet’s see how this works by manually combining our effect plots and the point estimate plot.\n\n# We already saved our initial plot as all.plots \n# now we want to combine all.plots with point.est_plot\n\n# let's save point.est_plot as a plot_grid object to include a label D\nd_panel &lt;- plot_grid(\n  point.est_plot, \n  labels = c('D')\n)\n\n# now let's combine all panels \nall_panels &lt;- plot_grid(\n  all.plots, \n  d_panel, \n  nrow = 2, # we want two rows \n  rel_heights = c(1,1) # both rows have the same height ratio \n)\n\n\nall_panels\n\n\n\n\n\n\n\n\nOnce again, this plot doesn’t look great since its components are being squeezed into our screen dimensions. We can fix this by saving the plot.\n\nggsave(plot = all_panels, #Specify the (named) plot that you wish to save\n       filename = './images/all_panels.png', #Specify the file path that should be used to save this image (note that \"./\" is a shortcut that tells R to save the file to your current working directory.)\n       dpi = 300, #Specify the resolution (dots per linear inch; 300 is the minimum for graphics you wish to publish)\n       scale = 0.65,\n       width = 14, #Specify the width of the image\n       height = 14, #Specify the height of the image\n       units = 'in') #Specify the units of the previous two arguments\n\n\n\n\n\n\n\n\nNote\n\n\n\nCongratulations! You finished the tutorial! Hopefully you feel confident in your new found knowledge and abilities. Now go forth and make beautiful figures!"
  },
  {
    "objectID": "workshops/intro_ggplot2/index.html",
    "href": "workshops/intro_ggplot2/index.html",
    "title": "Intro to ggplot2",
    "section": "",
    "text": "Here are the slides embedded:\n\n\nAnd here is a link to the slides"
  }
]
---
title: "Introduction to ggplot2"
author:
  - name: "**Gabriela Palomo**"
    orcid: 0000-0002-0661-413X
    email: gpalomo@umd.edu
    url: https://gabspalomo.github.io
format: 
  revealjs: 
    # embed-resources: true
    # chalkboard: true
    standalone: true
    incremental: true
    smaller: true
    center: false
    slide-number: false
    overview: true
    # width: 1280
    # height: 720
    code-copy: true
    theme: [default, my_custom.scss]
    footer: "Guest lecture for Data Management and Analyses for Environmental Science - October 2023"
title-slide-attributes: 
  data-background-image: images/ggplot2.png
  data-background-position: 50% 10%
  data-background-size: 10%
  data-background-opacity: "0.5"
pdf-separate-fragments: false
---

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
library(ggplot2)
library(dplyr)
library(tidyr)
library(palmerpenguins)
library(ggthemes)
library(cowplot)
data(penguins)
```

## Learning objectives {.center}

After today's lecture, you'll be able to: 

  - Understand the basic syntax of ggplot.
  - Create basic plots: bar, points, lines, boxplots, error bars, etc. 
  - Create color palettes and use colors effectively: qualitative, secuential, and diverging palettes. 
  - Customize the theme of a plot. 

## Grammar of Graphics 

:::: {.columns}
::: {.column width="60%" .nonincremental}
- ["ggplot2: elegant graphics for data analysis"](https://ggplot2-book.org/) 

![](./images/cover.jpg){width=40% fig-align='center'}
:::

::: {.column width="40%"}
- `gglot2` is an R package for creating graphics. 

- Created by Hadley Wickham and is considered to be part of the `tidyverse`.

- Compose graphs by combining independent components: versatile!

- If you learn the grammar then you will end up creating better graphics in less time.
:::

::::

## Create graphs for publications {.smaller}

::: {layout-ncol=2}
![](./images/tt01.png){width=1400}

![](./images/tt02.png){width=1400}

:::

## Create graphs for publications {.smaller}

::: {layout-ncol=2}

![](./images/tt03.jpg){width=1400}

![](./images/tt04.png){width=1400}

:::

:::{style="font-size:12px" .nonincremental}

- Tallian, A., Mattisson, J., Samelius, G., Odden, J., Mishra, C., Linnell, J.D., Lkhagvajav, P. and Johansson, O., 2023. Wild versus domestic prey: Variation in the kill-site behavior of two large felids. Global Ecology and Conservation, e02650.

- Semper-Pascual, A., Sheil, D., Beaudrot, L. et al. Occurrence dynamics of mammals in protected tropical forests respond to human presence and activities. Nat Ecol Evol 7, 1092-1103 (2023). https://doi.org/10.1038/s41559-023-02060-6

:::

## Data structure 

:::: {.columns}

::: {.column width="30%" .nonincremental}

- Wide format

```{r}
library(gt)
penguins %>% 
  filter(species == 'Adelie') %>% 
  pivot_wider(names_from = year, 
    values_from = body_mass_g) %>% 
  select(species, '2007', '2008', '2009') %>% 
  slice(1:10) %>% 
  gt() %>% 
  tab_style(style = cell_text(weight = "bold"), 
            locations = cells_column_labels())

```

:::


::: {.column width="30%" .nonincremental}

- Long format

```{r}
library(gt)
penguins %>% 
  relocate(year, .after = species) %>% 
  slice(1:10) %>% 
  gt() %>% 
  tab_style(style = cell_text(weight = "bold"), 
            locations = cells_column_labels())

```
:::

::: {.column width="10%"}

:::

::: {.column width="30%"}
  
  - Long format data.

  - Each row is an observation point and each column is a variable. 

  - Data wrangle BEFORE you graph: `tidyr::pivot_longer()`

:::

::::

# ggplot2 

## Mapping components {.center}

:::{.nonincremental} 

- 6 main building blocks, each with their own arguments. 

:::

::: {.nonincremental}

```{css echo=FALSE}
.big-code {
  font-size: 3.0em;
  /* or try font-size: xx-large; */
}
```

<div class=.big-code>
```{r}
#| echo: true
#| eval: false 
#| code-line-numbers: "1-3|4|5|6|7|8" 

ggplot(data = data,
       mapping = aes(x = x, 
                     y = y)) +
  geom_function( ) +
  coordinate_function( ) +
  facet_function( ) +
  scale_function( ) +
  theme_function( )
```
</div>

:::

## Mapping components :: ggplot() {.center}

:::: {.columns}

::: {.column width="60%"}

:::{.fragment .fade-in}

```{r}
#| echo: true
#| eval: true

ggplot(data = penguins,
       mapping = aes(x = body_mass_g, 
                     y = flipper_length_mm)) 
```

:::

:::

::: {.column width="40%"}

:::{.fragment .fade-in}

- `ggplot()` : initilizes the plot and creates the graphing space.
- `data` 
  - data frame with the columns to plot. 
  - reference object for all subsequent arguments and functions. 
  - **long** format.
- `aes()` 
  - defines the axes. 
  - x=x, y=y, depends on plots, some only need x=x. 
  - uses column names. 
  - x, y included here will be used to build the entire plot. 
  
:::
:::

::::

## Mapping components :: geoms 

:::: {.columns}
::: {.column width="65%"}

```{r}
#| echo: true
#| eval: false 
#| code-line-numbers: "2-9"

ggplot(data = data) +
  geom_function(aes(x = x, 
                    y = y, 
                    color=v, # points, lines, error bars
                    shape=w, # see pch numbers 
                    fill=z), # bars, columns, boxplots, violins
                alpha=0.3, # transparency 
                position = position_dodge() # bar plots are not stacked
                ) 
```

**PCH codes**

:::  {layout="[[1], [-1]]"}

![](./images/pch-codes.png){width=300 fig-align='center'}
:::

:::

::: {.column width="35%"}
- `geom_function()` different types of plots.  
  - x,y, but some only need x. 
  - uses column names. 
  - x, y included here used only for this specific geom. 
  - Other aesthetic arguments: `color`, `fill`, `shape` (pch) take column names.
  - Static arguments outside the `aes()` are `color`, `fill`, `shape` and only take one value. 
  - Other arguments outside `aes()` are `alpha` (transparency, 0-1), `position`, `size`, or `linewidth`. 

:::

::::


## Different types of geoms 

```{r}
#| echo: false
options(scipen = 999) # remove scientific notation 
colpal <- c('#cbdfbd', '#a6b1e1', '#ef5d60', '#ec4067', '#a01a7d', '#311847')

theme_g <- theme(legend.position = 'right', 
                 # legend.direction = 'horizontal',
                 legend.title = element_blank(),
                 legend.text = element_text(size=8),
                 plot.subtitle = element_text(size=6),
                 plot.title = element_text(hjust = 0, family = 'bold', color = 'black', size = 10), 
                 axis.title = element_text(family='bold', color='black', size=8), 
                 axis.text = element_text(size=8),
                 panel.border = element_blank())

ggplot(penguins)+
  geom_point(aes(x=body_mass_g, y=flipper_length_mm, color=species))+
  scale_color_manual(values=colpal)+
  labs(title = 'Scatter plot: geom_point()')+
  ylab('Flipper length (mm)')+
  xlab('Body mass (g)')+
  theme_classic()+
  theme_g -> p1

ggplot(penguins)+
  geom_bar(aes(x=species, fill=species))+
  scale_fill_manual(values=colpal)+
  labs(title = 'Bar plot: geom_bar()')+
  ylab('Frequency')+
  xlab('Species')+
  theme_classic()+
  theme_g->p2

ggplot(penguins)+
  geom_col(aes(x=species, y=body_mass_g, fill=species))+
  scale_fill_manual(values=colpal)+
  labs(title = 'Column plot: geom_col()')+
  ylab('Body mass (g)')+
  xlab('Species')+
  scale_y_continuous(labels = scales::comma)+ # separate numbers with comma y-axis
  theme_classic()+
  theme_g->p3

data("Orange")
ggplot(Orange)+
  geom_line(aes(x=age, y=circumference, color=Tree))+
  scale_color_manual(values=colpal)+
  labs(title = 'Line plot: geom_line()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p4

ggplot(penguins)+
  geom_histogram(aes(x=body_mass_g, y = ..density.., fill=species))+
  geom_density(aes(x=body_mass_g, 
                   color=species), 
               linewidth=1)+
  scale_color_manual(values = c('gray20', 'gray40', 'gray60'))+
  scale_fill_manual(values=colpal)+
  guides(fill = guide_legend(override.aes = list(linetype=0)))+
  labs(title = 'Histogram and Density plot: \n geom_histogram() & geom_density')+
  ylab('Density')+
  xlab('Body mass (g)')+
  theme_classic()+
  theme_g->p5

ggplot(penguins)+
  geom_boxplot(aes(x=species, y=body_mass_g, fill=island))+
  scale_fill_manual(values=colpal)+
  guides(fill = guide_legend(override.aes = list(linetype=0)))+
  labs(title = 'Boxplot: geom_boxplot()')+
  xlab('Species')+
  ylab('Body mass (g)')+
  theme_classic()+
  theme_g->p6

peng_eb <- penguins %>%
  group_by(island, species) %>% 
  summarise(mean_bmass = mean(body_mass_g, na.rm = TRUE), 
            sd_bmass = sd(body_mass_g, na.rm = TRUE), 
            n = n()) %>% 
  mutate(se_bmass = sd_bmass/sqrt(n), 
         lower.ci = mean_bmass-qt(1 - (0.05 / 2), n - 1) * se_bmass,
         upper.ci = mean_bmass+qt(1 - (0.05 / 2), n - 1) * se_bmass)

ggplot(peng_eb)+
  geom_point(aes(x=species, y=mean_bmass, color=island), 
             position = position_dodge(width = 0.5))+
  geom_errorbar(aes(x=species, y=mean_bmass, color=island, ymin=lower.ci, ymax=upper.ci), 
                width=0.2, position = position_dodge(width = 0.5))+
  scale_color_manual(values=colpal)+
  labs(title = 'Error bars: geom_errorbar()',
       subtitle = 'Error bars show 95% CI')+
  xlab('Species')+
  ylab('Body mass (g)')+
  theme_classic()+
  theme_g->p7

ggplot(Orange)+
  geom_line(aes(x=age, y=circumference, color=Tree), 
            linewidth=1)+
  geom_ribbon(aes(x=age, y=circumference, ymin=circumference-15, ymax=circumference+15, fill=Tree),
              alpha=0.1)+
  scale_color_manual(values=colpal)+
  scale_fill_manual(values=colpal)+
  labs(title = 'Shaded error bands: geom_ribbon()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p8

ggplot(Orange, aes(age, y=circumference))+
  geom_point(color='gray30')+
  geom_smooth(color='gray20', 
              fill=colpal[2])+
  labs(title = 'Smoothed plot: geom_smooth()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p9

# Arrange plots in a grid 
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9)

```

## coord_function() :: optional {.center}

:::: {.columns}
::: {.column width="65%"}

```{r}
#| echo: true
#| eval: false 
#| code-line-numbers: "2-9"

ggplot(data = data) +
  geom_function(aes(x = x, 
                    y = y))+
  coord_function()

```

:::

::: {.column width="35%"}
  
  - `coord_flip()` will flip the x and y axis. 
  - `coord_cartesian` will set limits on the coordinate system, e.g., zoom the plot.
  - `coord_trans` will apply different transformations to x or y variables.  

:::

::::


## facet_function() :: optional 
::: {.nonincremental}
- We have two options `facet_wrap()` and `facet_grid()`.
- Facets divide a plot into subplots based on a variable in the dataset. 
- Allows for comparison across groups. 
:::

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  facet_wrap(~island)

```

:::

::: {.column width="50%"}
  
```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  facet_grid(species~island)

```

:::

::::

## facet_function() :: optional 
::: {.nonincremental .center}
![](./images/facets.png)
:::

## scale_function() :: optional 

::: {.nonincremental}
- Lets you change the visual values of a group aesthetic: colors, fills, shapes (scale_manual). 
- Discrete and continuous scales. 
- Predetermined color palettes: ggthemes::scale_color_colorblind()
:::

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island), size=3)+
  ggthemes::scale_color_colorblind()

```

:::

::: {.column width="50%"}
  
```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 shape=island), size = 3.5)+
  scale_shape_discrete() #up to 6 discernible shapes

```

:::

::::

## scale_function() :: optional 

::: {.nonincremental}

`scale_*()` functions can modify:

- **Position** via `scale_x_*()` or `scale_y_*()`
- **Colors** via `scale_color_*()` and `scale_fill_*()`
- **Transparency** via `scale_alpha_*()`
- **Sizes** via `scale_size_*()`
- **Shapes** via `scale_shape_*()`

  - `*` can take the following forms:
    - **axes:** continuous, discrete, reverse, log10, sqrt, date, time. 
    - **Colors & fill:** continuous, discrete, manual, gradient, hue, brewer.
    - **Transparency:**  continuous, discrete, manual, ordinal, identity, date.
    - **Sizes:**  continuous, discrete, manual, ordinal, identity, area, date.
    - **Shapes and linetypes:**  continuous, discrete, manual, ordinal, identity.
  
:::


## Color palettes 

:::: {.columns}
::: {.column width="50%" .nonincremental}

- Available packages with predefined palettes: 

  - [colorblindr](https://github.com/clauswilke/colorblindr)
  - [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)
  - [ggthemes](https://jrnold.github.io/ggthemes/reference/index.html)
  - [LaCroixPalette](https://github.com/johannesbjork/LaCroixColoR)
  - [ColorBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html)
  - [WesAnderson](https://github.com/karthik/wesanderson)
  - [MoMa](https://github.com/BlakeRMills/MoMAColors)
  
- This is a comprehensive list of [color palettes in r](https://github.com/EmilHvitfeldt/r-color-palettes) curated by Emil Hvitfeldt. 

- Generally, there are 3 types of palettes: 

  - **Sequential:** data that goes from low to high. 
  - **Diverging:** put equal emphasis on mid-range values and extremes. 
  - **Qualitative:** best for categorical data. Visual differences are given by hues. 

:::

:::{.column width=50% .nonincremental}
```{r}
#| echo: false 
#| fig.height: 12

library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
```
:::

::::

## theme_function() :: optional 

:::: {.columns}

::: {.column width="60%" .incremental}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 8

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_linedraw()

```

:::

::: {.column width="40%"}

- Modifies the overall visual defaults of a plot. 
  - titles
  - labels
  - fonts
  - background
  - gridlines
  - legends 

- `theme()` and `theme_()`. 
  - `theme_` will have predefined themes. 
  - `theme` will help you customize and personalize the overall look of your plot. 
  - You can start with a predefined `theme` and then customize it with `theme_`.
  
- `theme()` will include `element_` functions to modify different areas. 

- Predefined ggplot2 themes: `theme_classic()`, `theme_gray()`, `theme_bw()`, `theme_linedraw()`, `theme_light()`, `theme_dark()`, `theme_minimal()`, `theme_void()`

:::

::::

# Let's create some plots 


## Auxiliary packages {.center}

::: {.nonincremental}

- Here is a list with the current `ggplot2` [geoms](https://ggplot2.tidyverse.org/reference/index.html)
- Other packages with additional geoms, here is a list: 
:::

:::: {.columns .nonincremental}
::: {.column width="10%" .nonincremental}

:::

::: {.column width="40%" .nonincremental}
  - [gganimate](https://www.rdocumentation.org/packages/gganimate/versions/0.1.0.9000)
  - [ggalt](https://cran.r-project.org/web/packages/ggalt/vignettes/ggalt_examples.html)
  - [ggdendro](https://cran.r-project.org/web/packages/ggdendro/vignettes/ggdendro.html)
  - [ggthemes](https://www.rdocumentation.org/packages/ggthemes/versions/3.5.0)
  - [ggpubr](https://www.rdocumentation.org/packages/ggpubr/versions/0.1.6)
  - [patchwork](https://www.rdocumentation.org/packages/patchwork/versions/0.0.1/topics/patchwork)
  - [cowplot](https://wilkelab.org/cowplot/index.html)
  
:::

::: {.column width="40%" .nonincremental}
  - [ggridges](https://www.rdocumentation.org/packages/ggridges/versions/0.5.0)
  - [ggcorrplot](https://github.com/kassambara/ggcorrplot)
  - [ggiraph](http://davidgohel.github.io/ggiraph/index.html)
  - [ggradar](https://github.com/ricardo-bion/ggradar#ggradar)
  - [Waffle charts](https://github.com/hrbrmstr/waffle)
  - [Beeswarm charts](https://github.com/eclarke/ggbeeswarm)

:::

::::

## Free online books {.center}

- ggplot2: Elegant Graphics for Data Analysis by [Hadley Wickham](ggplot2-book.org)
- R for Data Science by [Hadley Wickham](r4ds.had.co.nz)
- Data Visualization: A Practical Introduction by [Kieran Healy](socviz.co)
- Fundamentals of Data Visualization by [Claus Wilke](serialmentor.com/dataviz)
- [R Graph Gallery](r-graph-gallery.com)
- [ggplot2 Extension Gallery](ggplot2-exts.org/gallery)

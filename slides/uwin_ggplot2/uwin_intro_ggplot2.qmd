---
title: "Introduction to ggplot2"
author:
  - name: "**Gabriela Palomo & Dan Herrera**"
    # orcid: 0000-0002-0661-413X
    email: gpalomo@umd.edu & dherrer3@umd.edu 
    # url: https://
format: 
  revealjs: 
    embed-resources: true
    standalone: true
    incremental: true
    smaller: true
    center: false
    slide-number: false
    overview: true
    # width: 1280
    # height: 720
    code-copy: true
    theme: [default, my_custom.scss]
    footer: "UWIN R Workshops - June 2024"
title-slide-attributes: 
  data-background-image: ./images/ggplot2.png
  data-background-position: 50% 7%
  data-background-size: 10%
  # data-background-opacity: "0.5"
pdf-separate-fragments: false
---

```{r setup, include=FALSE} 
knitr::opts_chunk$set(warning = FALSE, message = FALSE) 
library(ggplot2)
library(dplyr)
library(tidyr)
library(palmerpenguins)
library(ggthemes)
library(cowplot)
data(penguins)
```

## Instructors 

:::: {.columns}

::: {.column width=50% .nonincremental}

Gabriela Palomo 
[gabriella.palomo@gmail.com](gabriella.palomo@gmail.com) 

![](./images/gabby_palomo.png)

:::

::: {.column width=50% .nonincremental}

Dan Herrera  
[herrerawildlife@gmail.com](herrerawildlife@gmail.com)

![](./images/DanHerrera.jpg)


:::

::::

## Learning objectives {.center}

After today's lecture, you'll be able to: 

  - Understand the basic syntax of ggplot.
  - Create basic plots: bar, points, lines, boxplots, error bars, etc. 
  - Create color palettes and use colors effectively: qualitative, sequential, and diverging palettes. 
  - Customize the theme of a plot. 

## Grammar of Graphics 

:::: {.columns}
::: {.column width="60%" .nonincremental}
- ["ggplot2: elegant graphics for data analysis"](https://ggplot2-book.org/) 

![](./images/cover.jpg){width=40% fig-align='center'}
:::

::: {.column width="40%"}
- `gglot2` is an R package for creating graphics. 

- Created by Hadley Wickham and is considered to be part of the `tidyverse`.

- Compose graphs by combining independent components: versatile!

- If you learn the grammar then you will end up creating better graphics in less time.
:::

::::



## Data structure 

:::: {.columns}

::: {.column width="30%" .nonincremental}

- Wide format

```{r}
library(gt)
penguins %>% 
  filter(species == 'Adelie') %>% 
  pivot_wider(names_from = year, 
    values_from = body_mass_g) %>% 
  select(species, '2007', '2008', '2009') %>% 
  slice(1:10) %>% 
  gt() %>% 
  tab_style(style = cell_text(weight = "bold"), 
            locations = cells_column_labels())

```

:::


::: {.column width="30%" .nonincremental}

- Long format

```{r}
library(gt)
penguins %>% 
  relocate(year, .after = species) %>% 
  slice(1:10) %>% 
  gt() %>% 
  tab_style(style = cell_text(weight = "bold"), 
            locations = cells_column_labels())

```
:::

::: {.column width="10%"}

:::

::: {.column width="30%"}
  
  - Long format data.

  - Each row is an observation point and each column is a variable. 

  - Data wrangle BEFORE you graph: `tidyr::pivot_longer()`

:::

::::

# ggplot2 

## Mapping components {.center}

:::{.nonincremental} 

- 6 main building blocks, each with their own arguments. 

:::

::: {.nonincremental}

```{css echo=FALSE}
.big-code {
  font-size: 3.0em;
  /* or try font-size: xx-large; */
}
```

<div class=.big-code>
```{r}
#| echo: true
#| eval: false 
#| code-line-numbers: "1|2|3|4|5|6|7|8" 

ggplot(data = data, mapping = aes(x = x, y = y)) +
  geom_*( ) + # geometries: e.g., geom_point(), geom_bar(), ...
  coord_*( ) + 
  facet_*( ) + # dividing your data into facets: facet_grid() and facet_wrap()
  scale_*( ) + # controls visual values: colors, fills, shapes. E.g., scale_manual().
  theme_*( )   # Controls the overall appearence of the plot: fonts, font size, etc.  
```
</div>

:::

## Always begin with `ggplot()` {.center}

:::: {.columns}

::: {.column width="60%"}

::: {.fragment .fade-in}

```{r}
#| echo: true
#| eval: true

ggplot(data = penguins,
       mapping = aes(x = body_mass_g, 
                     y = flipper_length_mm)) 
```

:::

:::

::: {.column width="40%"}

:::{.fragment .fade-in}

- `ggplot()`: graphing space.

- `data` 
  - data frame or tibble in **long** format. 
  - reference object for all subsequent arguments and functions. 
- `aes()` 
  - defines the axes and uses column names. 
    

:::

:::

::::

## Geometries or `geom_*` 

:::: {.columns}
::: {.column width="65%"}

```{r}
#| echo: true
#| eval: false 
#| code-line-numbers: "2-9"

ggplot(data = data) +
  geom_*(aes(x = x, 
             y = y, 
             color = color, # points, lines, error bars
             shape = shape, # see pch numbers 
             fill = fill), # bars, columns, boxplots, violins
         alpha=0.3, # transparency 
         shape = pch, # change the point shape; this is a number or vector of numbers
         position = position_dodge() # bar plots are not stacked
  ) 
```

:::  {layout="[[1], [-1]]"}
![](./images/pch-codes.png){width=200 fig-align='center'}
:::

:::

::: {.column width="35%"}  
- x,y, but some only need x. 
- x, y included here used only for this specific geom. 
- Other aesthetic arguments: `color`, `fill`, `shape` (pch) take column names.
- Static arguments outside the `aes()`: `color`, `fill`, `shape`, `alpha` (transparency, 0-1), `position`, `size`, or `linewidth`. 

:::

::::


## Choosing the right visualization

```{r, echo=FALSE, message=FALSE, warning=FALSE}

library(ggplot2) #graphing
library(sf) #spatial
library(raster) #spatial
library(tigris) #spatial data
library(cowplot) #arranging plots
library(grid) #drawing lines on plots


mini_theme <- function() {
  theme(
    legend.position = "none",
    plot.background = element_blank(),
    panel.background = element_blank(),
    axis.text = element_blank(),
    plot.title = element_blank(),
    axis.title = element_blank(),
    axis.ticks = element_blank(),
    axis.line = element_line(color = utility.color,
                             size = .25)
  )
}

utility.color <- "black"
color1 <- "#a01a7d"
color2 <- "#a6b1e1"
color3 <- "#cbdfbd"
color4 <- "#ec4067"

data.compare <- data.frame(group = c("a","b","c","d"),
                           val = c(6,3,11,9))

plot.bar <- ggplot(data = data.compare, aes(x = as.factor(group), y = val))+
  geom_col(fill = c(color1,color2,color3,color4))+
  mini_theme()

plot.line <- ggplot(data = data.compare, aes(x = c(1,2,3,4), y = val))+
  geom_line(color = color1)+
  mini_theme()

data.stacked.bar <- data.frame(group = c(rep("a",5),rep("b",6),rep("c",4)),
                               fill = rep(c("bad","fine","good"),5))

plot.stacked.bar <- ggplot(data.stacked.bar, aes(fill=fill, x=group, y = group)) +
  geom_bar(position="stack", stat="identity")+
  scale_fill_manual(values = c(color1,color2,color3))+
  mini_theme()

plot.pie <- ggplot(data = data.compare, aes(x = "", y = val, fill = group))+
  geom_col(fill = c(color1,color2,color3,color4))+
  coord_polar(theta = "y")+
  theme_void()

data.stacked.area <- data.frame(time = as.numeric(rep(seq(1,5),each=4)),
                                value = c(1,2,1,2,3,3,3,5,4,3,6,5,7,8,9,8,8,10,11,10),
                                group = rep(LETTERS[1:4],times=5))

plot.stacked.area <- ggplot(data.stacked.area, aes(x=time, y=value, fill=group)) +
  geom_area()+
  scale_fill_manual(values = c(color1,color2,color3,color4))+
  mini_theme()


plot.boxwhisker <- ggplot(data = data.stacked.area, aes(x = group, y = value))+
  geom_boxplot(fill= c(color1,color2,color3,color4),
               color = c(color1,color2,color3,color4))+
  mini_theme()

data.betas <- data.frame(group = c("a","b","c"),
                         lowerCI = c(-.7, -.2,.3),
                         meanCI = c(-.5,.05, .45),
                         upperCI = c(-.3,.3,.6))

plot.betas <- ggplot(data = data.betas, aes(x = meanCI, y = group))+
  geom_point(color= c(color1,color2,color3))+
  geom_linerange(aes(xmin = lowerCI, xmax = upperCI),
                 color= c(color1,color2,color3))+
  geom_vline(xintercept = 0,
             color = utility.color,
             size = .25,
             linetype = "dashed")+
  mini_theme()


data.scatter <- data.frame(x = c(seq(1,10,1),seq(1,10,2.5),4,6,7,8),
                           y = c(2,3,2,4,5,4,4,7,4,5,4,5,7,8,5.4,4.5,6,7))

plot.scatter <- ggplot(data = data.scatter, aes(x = x, y=y))+
  geom_point(color = color1,
             size = 1)+
  mini_theme()


data.bubble <- data.scatter[c(2,4,6,8,10,12,14,16,18),]
data.bubble$size <- c(3,5,9,2,5,2,8,6,12)

plot.bubble <- ggplot(data = data.bubble, aes(x = x, y=y))+
  geom_point(size = as.vector(data.bubble$size*.35),
             color = color1)+
  mini_theme()

data.waffle <- expand.grid(x = seq(1,5,1),
                           y = seq(1,5,1))
data.waffle$val <- c(1,2,3,4,5,
                     2,3,4,5,4,
                     3,4,5,4,3,
                     4,5,4,3,2,
                     5,4,3,2,1)

plot.waffle <- ggplot(data = data.waffle, aes(x = x, y=y, fill = val))+
  geom_raster()+
  scale_fill_gradient(low = color1,
                      high = color2)+
  coord_fixed(1)+
  theme_void()+
  theme(legend.position = "none")

hist.data <- data.frame(var = c(0,1,2,2,3,3,3,3,4,4,4,5,5,6))

plot.histogram <- ggplot(data = hist.data, aes(x = var))+
  geom_histogram(binwidth = 1,
                 fill = color1)+
  mini_theme()

plot.density <- ggplot(data = hist.data, aes(x = var))+
  stat_density(fill = color1)+
  xlim(-2, 8)+
  mini_theme()

violin.data <- data.frame(var = c(1,2,3,3,4,4,4,5,6,6,7,
                                  4,5,6,6,6,7,7,7,8,9),
                          group = c(rep("a",11), rep("b",10)))

plot.violin <- ggplot(data = violin.data, aes(x = group, y = var))+
  geom_violin(fill = color1,
              color = color1)+
  mini_theme()

poly.data <- states(progress_bar=FALSE)
poly.data <- poly.data[which(poly.data$NAME %in% "Texas"),]

plot.vector <- ggplot(data = poly.data)+
  geom_sf(fill = color1,
          color = "transparent")+
  theme_void()


state.rast.data <- st_as_sf(st_make_grid(x = poly.data,
                                         n=10,
                                         square = TRUE))

raster.centers <- st_centroid(state.rast.data)

raster.centers <- st_intersection(x = raster.centers,
                                  y = poly.data)

keep.vals <- as.data.frame(st_intersects(x = state.rast.data,
                                         y = raster.centers))

state.rast.data <- state.rast.data[which(rownames(state.rast.data) %in% keep.vals$row.id),]

state.rast.data$vals <- rnorm(n = 48, mean = 10, sd = 2)

plot.raster <- ggplot(data = state.rast.data, aes(group = vals))+
  geom_sf(aes(fill = vals),
          color = "transparent")+
  scale_fill_gradient(low = color1,
                      high = color2)+
  theme_void()+
  theme(legend.position = "none")



#putting all plots together

line.color <- "black"
label.size <- 10

ggdraw()+
  #add plots and labels
  draw_plot(plot = plot.bar,
            x = (1/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "bar plot",
            x = (1/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.stacked.bar,
            x = (2/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "stacked bar plot",
            x = (2/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.stacked.area,
            x = (3/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "stacked area plot",
            x = (3/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.betas,
            x = (4/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "dot plot",
            x = (4/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.boxwhisker,
            x = (5/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "box and whisker",
            x = (5/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.pie,
            x = (6/7)+.02,
            y = 4/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "pie chart",
            x = (6/7)+.02,
            y = 4/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.bar,
            x = (1/7)+.02,
            y = 3/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "bar plot",
            x = (1/7)+.02,
            y = 3/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.line,
            x = (2/7)+.02,
            y = 3/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "line graph",
            x = (2/7)+.02,
            y = 3/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.stacked.area,
            x = (3/7)+.02,
            y = 3/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "stacked area plot",
            x = (3/7)+.02,
            y = 3/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.waffle,
            x = (1/7)+.02,
            y = (2/5)+.01,
            width = 1/7,
            height = (1/6)-.02,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "waffle plot",
            x = (1/7)+.02,
            y = 2/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.line,
            x = (2/7)+.02,
            y = 2/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "line graph",
            x = (2/7)+.02,
            y = 2/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.scatter,
            x = (3/7)+.02,
            y = 2/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "scatter plot",
            x = (3/7)+.02,
            y = 2/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.bubble,
            x = (4/7)+.02,
            y = 2/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "bubble plot",
            x = (4/7)+.02,
            y = 2/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.histogram,
            x = (1/7)+.02,
            y = 1/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "histogram",
            x = (1/7)+.02,
            y = 1/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.density,
            x = (2/7)+.02,
            y = 1/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "density plot",
            x = (2/7)+.02,
            y = 1/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.scatter,
            x = (3/7)+.02,
            y = 1/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "scatter plot",
            x = (3/7)+.02,
            y = 1/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.violin,
            x = (4/7)+.02,
            y = 1/5,
            width = 1/7,
            height = 1/6,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "violin plot",
            x = (4/7)+.02,
            y = 1/5,
            size = label.size,
            hjust = 0.5,
            vjust = 0.5)+
  draw_plot(plot = plot.vector,
            x = (1/7)+.02,
            y = 0.03,
            width = 1/7,
            height = (1/6)-.03,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "vector",
            x = (1/7)+.02,
            y = 0.01,
            size = label.size,
            hjust = 0.5,
            vjust = 0)+
  draw_plot(plot = plot.raster,
            x = (2/7)+.02,
            y = 0.03,
            width = 1/6,
            height = (1/6)-0.03,
            hjust = 0.5,
            vjust = 0)+
  draw_text(text = "raster",
            x = (2/7)+.02,
            y = 0.01,
            size = label.size,
            hjust = 0.5,
            vjust = 0)+
  #category labels
  draw_text(text = paste("Compare", "groups",sep="\n"),
            x = 0.01,
            y = (4/5)+(.5*(1/5)),
            size = label.size,
            hjust = 0,
            vjust = 0.5,
            fontface = "bold")+
  draw_text(text = paste("Trends", "over","time",sep="\n"),
            x = 0.01,
            y = (3/5)+(.5*(1/5)),
            size = label.size,
            hjust = 0,
            vjust = 0.5,
            fontface = "bold")+
  draw_text(text = paste("Relationships", "between","variables",sep="\n"),
            x = 0.01,
            y = (2/5)+(.5*(1/5)),
            size = label.size,
            hjust = 0,
            vjust = 0.5,
            fontface = "bold")+
  draw_text(text = "Distributions",
            x = 0.01,
            y = (1/5)+(.5*(1/5)),
            size = label.size,
            hjust = 0,
            vjust = 0.5,
            fontface = "bold")+
  draw_text(text = paste("Trends", "over","space",sep="\n"),
            x = 0.01,
            y = (.5*(1/5)),
            size = label.size,
            hjust = 0,
            vjust = 0.5,
            fontface = "bold")+
  #lines between groups
  draw_grob(linesGrob(x = c(.01, 0.99),
                      y = c((1/5)-0.025, (1/5)-0.025),
                      gp = gpar(col = line.color,
                                lwd = 1)))+
  draw_grob(linesGrob(x = c(.01, 0.99),
                      y = c((2/5)-0.025, (2/5)-0.025),
                      gp = gpar(col = line.color,
                                lwd = 1)))+
  draw_grob(linesGrob(x = c(.01, 0.99),
                      y = c((3/5)-0.025, (3/5)-0.025),
                      gp = gpar(col = line.color,
                                lwd = 1)))+
  draw_grob(linesGrob(x = c(.01, 0.99),
                      y = c((4/5)-0.025, (4/5)-0.025),
                      gp = gpar(col = line.color,
                                lwd = 1)))


```


## Different types of geometries 

```{r}
#| echo: false
options(scipen = 999) # remove scientific notation 
colpal <- c('#cbdfbd', '#a6b1e1', '#ef5d60', '#ec4067', '#a01a7d', '#311847')

theme_g <- theme(legend.position = 'right', 
                 # legend.direction = 'horizontal',
                 legend.title = element_blank(),
                 legend.text = element_text(size=8),
                 plot.subtitle = element_text(size=6),
                 plot.title = element_text(hjust = 0, family = 'bold', color = 'black', size = 10), 
                 axis.title = element_text(family='bold', color='black', size=8), 
                 axis.text = element_text(size=8),
                 panel.border = element_blank())

ggplot(penguins)+
  geom_point(aes(x=body_mass_g, y=flipper_length_mm, color=species))+
  scale_color_manual(values=colpal)+
  labs(title = 'Scatter plot: geom_point()')+
  ylab('Flipper length (mm)')+
  xlab('Body mass (g)')+
  theme_classic()+
  theme_g -> p1

ggplot(penguins)+
  geom_bar(aes(x=species, fill=species))+
  scale_fill_manual(values=colpal)+
  labs(title = 'Bar plot: geom_bar()')+
  ylab('Frequency')+
  xlab('Species')+
  theme_classic()+
  theme_g->p2

ggplot(penguins)+
  geom_col(aes(x=species, y=body_mass_g, fill=species))+
  scale_fill_manual(values=colpal)+
  labs(title = 'Column plot: geom_col()')+
  ylab('Body mass (g)')+
  xlab('Species')+
  scale_y_continuous(labels = scales::comma)+ # separate numbers with comma y-axis
  theme_classic()+
  theme_g->p3

data("Orange")
ggplot(Orange)+
  geom_line(aes(x=age, y=circumference, color=Tree))+
  scale_color_manual(values=colpal)+
  labs(title = 'Line plot: geom_line()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p4

ggplot(penguins)+
  geom_histogram(aes(x=body_mass_g, y = ..density.., fill=species))+
  geom_density(aes(x=body_mass_g, 
                   color=species), 
               linewidth=1)+
  scale_color_manual(values = c('gray20', 'gray40', 'gray60'))+
  scale_fill_manual(values=colpal)+
  guides(fill = guide_legend(override.aes = list(linetype=0)))+
  labs(title = 'Histogram and Density plot: \n geom_histogram() & geom_density')+
  ylab('Density')+
  xlab('Body mass (g)')+
  theme_classic()+
  theme_g->p5

ggplot(penguins)+
  geom_boxplot(aes(x=species, y=body_mass_g, fill=island))+
  scale_fill_manual(values=colpal)+
  guides(fill = guide_legend(override.aes = list(linetype=0)))+
  labs(title = 'Boxplot: geom_boxplot()')+
  xlab('Species')+
  ylab('Body mass (g)')+
  theme_classic()+
  theme_g->p6

peng_eb <- penguins %>%
  group_by(island, species) %>% 
  summarise(mean_bmass = mean(body_mass_g, na.rm = TRUE), 
            sd_bmass = sd(body_mass_g, na.rm = TRUE), 
            n = n()) %>% 
  mutate(se_bmass = sd_bmass/sqrt(n), 
         lower.ci = mean_bmass-qt(1 - (0.05 / 2), n - 1) * se_bmass,
         upper.ci = mean_bmass+qt(1 - (0.05 / 2), n - 1) * se_bmass)

ggplot(peng_eb)+
  geom_point(aes(x=species, y=mean_bmass, color=island), 
             position = position_dodge(width = 0.5))+
  geom_errorbar(aes(x=species, y=mean_bmass, color=island, ymin=lower.ci, ymax=upper.ci), 
                width=0.2, position = position_dodge(width = 0.5))+
  scale_color_manual(values=colpal)+
  labs(title = 'Error bars: geom_errorbar()',
       subtitle = 'Error bars show 95% CI')+
  xlab('Species')+
  ylab('Body mass (g)')+
  theme_classic()+
  theme_g->p7

ggplot(Orange)+
  geom_line(aes(x=age, y=circumference, color=Tree), 
            linewidth=1)+
  geom_ribbon(aes(x=age, y=circumference, ymin=circumference-15, ymax=circumference+15, fill=Tree),
              alpha=0.1)+
  scale_color_manual(values=colpal)+
  scale_fill_manual(values=colpal)+
  labs(title = 'Shaded error bands: geom_ribbon()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p8

ggplot(Orange, aes(age, y=circumference))+
  geom_point(color='gray30')+
  geom_smooth(color='gray20', 
              fill=colpal[2])+
  labs(title = 'Smoothed plot: geom_smooth()')+
  ylab('Tree Circumference')+
  xlab('Age')+
  theme_classic()+
  theme_g->p9

# Arrange plots in a grid 
plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, p9)

```

## Change visual values using `scale_*()` 

::: {.nonincremental}

- Lets you change the visual values of a group aesthetic: colors, fills, shapes (scale_manual). 
- Discrete and continuous scales. 
- Predetermined color palettes: ggthemes::scale_color_colorblind()
- Use `xlab('x-axis title')` or `ylab('y-axis title')` or `ggtitle('title)`
- `labs(title, subtitle, caption, alt)`
- Change x- or y- limits by using `x_lims(c(0,1))`
- Find more info [here](https://ggplot2.tidyverse.org/reference/index.html#scales)

:::

## scale_*() 

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island), size=3)+
  ggthemes::scale_color_colorblind()

```

:::

::: {.column width="50%"}
  
```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 shape=island), size = 3.5)+
  scale_shape_discrete() #up to 6 discernible shapes

```

:::

::::

## Change color palettes `scale_*()` 

::: {.nonincremental}

`scale_*()` functions can modify:

- **Position** via `scale_x_*()` or `scale_y_*()`
- **Colors** via `scale_color_*()` and `scale_fill_*()`
- **Transparency** via `scale_alpha_*()`
- **Sizes** via `scale_size_*()`
- **Shapes** via `scale_shape_*()`

  - `*` can take the following forms:
    - **axes:** continuous, discrete, reverse, log10, sqrt, date, time. 
    - **Colors & fill:** continuous, discrete, manual, gradient, hue, brewer.
    - **Transparency:**  continuous, discrete, manual, ordinal, identity, date.
    - **Sizes:**  continuous, discrete, manual, ordinal, identity, area, date.
    - **Shapes and line types:**  continuous, discrete, manual, ordinal, identity.
  
:::


## Color palettes 

- Available packages with predefined palettes: 

  - [colorblindr](https://github.com/clauswilke/colorblindr)
  - [viridis](https://cran.r-project.org/web/packages/viridis/vignettes/intro-to-viridis.html)
  - [ggthemes](https://jrnold.github.io/ggthemes/reference/index.html)
  - [LaCroixPalette](https://github.com/johannesbjork/LaCroixColoR)
  - [ColorBrewer](https://r-graph-gallery.com/38-rcolorbrewers-palettes.html)
  - [WesAnderson](https://github.com/karthik/wesanderson)
  - [MoMa](https://github.com/BlakeRMills/MoMAColors)
  
- This is a comprehensive list of [color palettes in r](https://github.com/EmilHvitfeldt/r-color-palettes) curated by Emil Hvitfeldt. 


## Color palette types: 

:::: {.columns}
::: {.column width="50%" .nonincremental}

- Generally, there are 3 types of palettes: 

  - **Sequential:** data that goes from low to high. 
  - **Diverging:** put equal emphasis on mid-range values and extremes. 
  - **Qualitative:** best for categorical data. Visual differences are given by hues. 

:::

:::{.column width=50% .nonincremental}
```{r}
#| echo: false 
#| fig.height: 12

library(RColorBrewer)
par(mar=c(3,4,2,2))
display.brewer.all()
```
:::

::::

## Divide a plot using `facet_wrap()` and `facet_grid()`
::: {.nonincremental .center}
![](./images/facets.png)
:::


## Divide a plot using `facet_*()`

::: {.nonincremental}

- We have two options `facet_wrap()` and `facet_grid()`.
- Facets divide a plot into subplots based on a variable in the dataset. 
- Allows for comparison across groups. 

:::

:::: {.columns}
::: {.column width="50%"}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 4

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  facet_wrap(~island)

```

:::

::: {.column width="50%"}
  
```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 4

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  facet_grid(species~island)

```

:::

::::





## The look of the graph `theme_*()`

:::: {.columns}

::: {.column width="60%" .incremental}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_classic()

```

:::

::: {.column width="40%"}

- Modifies the overall visual defaults of a plot: titles, background color, gridlines, legends,

- `theme()` and `theme_*()`. 
  - `theme` will help you customize and personalize the overall look of your plot. 
  - You can start with a predefined `theme` and then customize it with `theme_*`.
  
- `theme()` will include `element_*` functions to modify different areas. 



:::

::::


## Predefined ggplot2 themes

- Predefined ggplot2 themes: `theme_classic()`, `theme_gray()`, `theme_bw()`, `theme_linedraw()`, `theme_light()`, `theme_dark()`, `theme_minimal()`, `theme_void()`

```{r}
#| echo: false 
#| fig-align: center

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_classic() + 
  theme(legend.position = 'none')-> p1

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_gray() + 
  theme(legend.position = 'none')-> p2

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_bw()+ 
  theme(legend.position = 'none') -> p3

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_linedraw() + 
  theme(legend.position = 'none')-> p4

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_light()+ 
  theme(legend.position = 'none') -> p5

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_dark()+ 
  theme(legend.position = 'none') -> p6

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_minimal() + 
  theme(legend.position = 'none')-> p7

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme_void() + 
  theme(legend.position = 'none')-> p8

plot_grid(p1, p2, p3, p4, p5, p6, p7, p8, ncol = 4)
```


## Modify elements in the `theme()`

:::: {.columns}

::: {.column width="60%" .incremental}

```{r}
#| echo: true
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 8
#| fig-show: hide

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme(plot.background = element_rect(colour = 'green', fill = 'gray80'), 
        panel.background = element_rect(colour = 'orange', size = 3, fill = 'pink'),
        panel.grid.major = element_line(color = 'blue', size = 2), 
        legend.position = 'bottom', 
        axis.title = element_text(size = 20))

```

:::

::: {.column width="40%"}

```{r}
#| echo: false
#| eval: true 
#| code-line-numbers: "5"
#| fig-height: 10

ggplot(penguins) +
  geom_point(aes(x = body_mass_g, 
                 y = flipper_length_mm, 
                 color=island))+
  theme(plot.background = element_rect(colour = 'green', fill = 'gray80', linetype = 'longdash', size = 4), 
        panel.background = element_rect(colour = 'orange', size = 3, fill = 'pink'),
        panel.grid.major = element_line(color = 'blue', size = 2), 
        legend.position = 'bottom', 
        axis.title = element_text(size = 30))

```

:::

::::


## Useful cheatsheets for theme 

- This is my favorite theme [cheatsheet](https://github.com/claragranell/ggplot2/blob/main/ggplot_theme_system_cheatsheet.pdf)

- [Theme cheatsheet 2](https://henrywang.nl/ggplot2-theme-elements-demonstration/)

- [Theme cheatsheet 3](https://isabella-b.com/blog/ggplot2-theme-elements-reference/)



# End {.center}
{
  "hash": "b890979461338e816af3e7e9179fb8da",
  "result": {
    "markdown": "---\ntitle: \"colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes\"\nauthor: \"Achim Zeileis, Jason C. Fisher, Kurt Hornik, Ross Ihaka, Claire D. McWhite, Paul Murrell, Reto Stauffer, Claus O. Wilke\"\noutput:\n  html_document:\n    toc: true\n    toc_float: true\n    theme: flatly\nbibliography: color.bib\nlink-citations: true\nvignette: >\n  %\\VignetteIndexEntry{colorspace: A Toolbox for Manipulating and Assessing Colors and Palettes}\n  %\\VignetteEngine{knitr::rmarkdown}\n  %\\VignetteDepends{colorspace,ggplot2}\n  %\\VignetteKeywords{RGB, sRGB, XYZ, LUV, LAB, HLS, HSV, HCL, qualitative palette, sequential palette, diverging palette, shiny, visualization, color vision deficiency}\n  %\\VignettePackage{colorspace}\n---\n\n::: {.cell}\n\n:::\n\n\n## Overview\n\nThe _colorspace_ package provides a broad toolbox for selecting individual\ncolors or color palettes, manipulating these colors, and employing\nthem in various kinds of visualizations.\n\nAt the core of the package there are various utilities for computing with\ncolor spaces (as the name of the package conveys). Thus, the package helps to map various three-dimensional\nrepresentations of color to each other. A particularly important\nmapping is the one from the perceptually-based and device-independent color model\nHCL (Hue-Chroma-Luminance) to standard Red-Green-Blue (sRGB) which is the basis for color\nspecifications in many systems based on the corresponding hex codes (e.g., in HTML but also\nin R). For completeness further standard color models are included as well in the package:\n`polarLUV()` (= HCL), `LUV()`, `polarLAB()`, `LAB()`, `XYZ()`, `RGB()`, `sRGB()`, `HLS()`,\n`HSV()`.\n\nThe HCL space (= polar coordinates in CIELUV) is particularly useful for\nspecifying individual colors and color palettes as its three axes match those\nof the human visual system very well: Hue (= type of color, dominant wavelength),\nchroma (= colorfulness), luminance (= brightness).\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](colorspace_files/figure-html/hcl-properties-1.png){fig-align='center' width=384}\n:::\n:::\n\n\nThe _colorspace_ package provides three types of palettes based on the HCL model:\n\n* _Qualitative:_ Designed for coding categorical information, i.e.,\n  where no particular ordering of categories is available and every color\n  should receive the same perceptual weight. Function: `qualitative_hcl()`.\n* _Sequential:_ Designed for coding ordered/numeric information, i.e.,\n  where colors go from high to low (or vice versa). Function: `sequential_hcl()`.\n* _Diverging:_ Designed for coding ordered/numeric information around a central\n  neutral value, i.e., where colors diverge from neutral to two extremes.\n  Function: `diverging_hcl()`.\n\nTo aid choice and application of these palettes there are: scales for use\nwith _ggplot2_; _shiny_ (and _tcltk_) apps for interactive exploration;\nvisualizations of palette properties; accompanying manipulation utilities\n(like desaturation, lighten/darken, and emulation of color vision deficiencies).\n\nMore detailed overviews and examples are provided in the articles:\n\n* [Color Spaces: S4 Classes and Utilities](https://colorspace.R-Forge.R-project.org/articles/color_spaces.html)\n* [HCL-Based Color Palettes](https://colorspace.R-Forge.R-project.org/articles/hcl_palettes.html)\n* [HCL-Based Color Scales for _ggplot2_](https://colorspace.R-Forge.R-project.org/articles/ggplot2_color_scales.html)\n* [Palette Visualization and Assessment](https://colorspace.R-Forge.R-project.org/articles/palette_visualization.html)\n* [Apps for Choosing Colors and Palettes Interactively](https://colorspace.R-Forge.R-project.org/articles/hclwizard.html)\n* [Color Vision Deficiency Emulation](https://colorspace.R-Forge.R-project.org/articles/color_vision_deficiency.html)\n* [Color Manipulation and Utilities](https://colorspace.R-Forge.R-project.org/articles/manipulation_utilities.html)\n* [Approximating Palettes from Other Packages](https://colorspace.R-Forge.R-project.org/articles/approximations.html)\n* [Somewhere over the Rainbow](https://colorspace.R-Forge.R-project.org/articles/endrainbow.html)\n\n\n## Installation\n\nThe stable release version of _colorspace_ is hosted on the Comprehensive R Archive Network\n(CRAN) at <https://CRAN.R-project.org/package=colorspace> and can be installed via\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"colorspace\")\n```\n:::\n\n\nThe development version of _colorspace_ is hosted on R-Forge at\n<https://R-Forge.R-project.org/projects/colorspace/> in a Subversion (SVN) repository.\nIt can be installed via\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"colorspace\", repos = \"https://R-Forge.R-project.org\")\n```\n:::\n\n\nFor Python users a beta re-implementation of the full _colorspace_ package in\nPython 2/Python 3 is also available, see <https://github.com/retostauffer/python-colorspace>.\n\n\n## Choosing HCL-based color palettes\n\nThe _colorspace_ package ships with a wide range of predefined color palettes,\nspecified through suitable trajectories in the HCL (hue-chroma-luminance) color space.\nA quick overview can be gained easily with the `hcl_palettes()` function:\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nlibrary(\"colorspace\")\nhcl_palettes(plot = TRUE)\n```\n\n::: {.cell-output-display}\n![](colorspace_files/figure-html/hcl-palettes-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\nA suitable vector of colors can be easily computed by specifying the desired number of colors and the palette name (see the plot above), e.g.,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nq4 <- qualitative_hcl(4, palette = \"Dark 3\")\nq4\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"#E16A86\" \"#909800\" \"#00AD9A\" \"#9183E6\"\n```\n:::\n:::\n\n\nThe functions `sequential_hcl()`, and `diverging_hcl()` work analogously. Additionally,\ntheir hue/chroma/luminance parameters can be modified, thus allowing for easy customization of\neach palette. Moreover, the `choose_palette()`/`hclwizard()` app provide convenient user\ninterfaces to perform palette customization interactively. Finally, even more flexible diverging\nHCL palettes are provided by `divergingx_hcl()`.\n\n\n## Usage with base graphics\n\nThe color vectors returned by the HCL palette functions can usually be passed directly\nto most base graphics, typically through the `col` argument. Here, the `q4`\nvector created above is used in a time series display:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(log(EuStockMarkets), plot.type = \"single\", col = q4, lwd = 2)\nlegend(\"topleft\", colnames(EuStockMarkets), col = q4, lwd = 3, bty = \"n\")\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](colorspace_files/figure-html/eustockmarkets-plot-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\nAs another example for a sequential palette, we demonstrate how to create a spine plot\ndisplaying the proportion of Titanic passengers that survived per class.\nThe `Purples 3` palette is used, which is quite similar to the **ColorBrewer.org**\npalette `Purples`. Here, only two colors are employed, yielding a dark purple\nand a light gray.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nttnc <- margin.table(Titanic, c(1, 4))\nspineplot(ttnc, col = sequential_hcl(2, palette = \"Purples 3\"))\n```\n:::\n\n::: {.cell layout-align=\"left\"}\n::: {.cell-output-display}\n![](colorspace_files/figure-html/titanic-plot-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\n\n## Usage with _ggplot2_\n\nTo provide access to the HCL color palettes from within _ggplot2_ graphics suitable discrete and/or\ncontinuous _ggplot2_ color scales are provided. The scales are named via the scheme\n`scale_<aesthetic>_<datatype>_<colorscale>()`, where `<aesthetic>` is the name\nof the aesthetic (`fill`, `color`, `colour`), `<datatype>` is the type of the\nvariable plotted (`discrete` or `continuous`) and `<colorscale>` sets the type\nof the color scale used (`qualitative`, `sequential`, `diverging`,\n`divergingx`).\n\nTo illustrate their usage two simple examples are shown using the qualitative `Dark 3`\nand sequential `Purples 3` palettes that were also employed above. For the first example, semi-transparent\nshaded densities of the sepal length from the iris data are shown, grouped by species.\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\nlibrary(\"ggplot2\")\nggplot(iris, aes(x = Sepal.Length, fill = Species)) + geom_density(alpha = 0.6) +\n  scale_fill_discrete_qualitative(palette = \"Dark 3\")\n```\n\n::: {.cell-output-display}\n![](colorspace_files/figure-html/iris-ggplot-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\nAnd for the second example the sequential palette is used to code the cut levels in a scatter of price by carat\nin the diamonds data (or rather a small subsample thereof). The scale function first\ngenerates six colors but then drops the first color because the light gray is too light\nhere. (Alternatively, the chroma and luminance parameters could also be tweaked.)\n\n\n::: {.cell layout-align=\"left\"}\n\n```{.r .cell-code}\ndsamp <- diamonds[1 + 1:1000 * 50, ]\nggplot(dsamp, aes(carat, price, color = cut)) + geom_point() +\n  scale_color_discrete_sequential(palette = \"Purples 3\", nmax = 6, order = 2:6)\n```\n\n::: {.cell-output-display}\n![](colorspace_files/figure-html/diamonds-ggplot-1.png){fig-align='left' width=100%}\n:::\n:::\n\n\n\n## Palette visualization and assessment\n\nThe _colorspace_ package also provides a number of functions that aid visualization and\nassessment of its palettes.\n\n* `demoplot()` can display a palette (with arbitrary number of colors) in a range of\n  typical and somewhat simplified statistical graphics.\n* `hclplot()` converts the colors of a palette to the corresponding hue/chroma/luminance\n  coordinates and displays them in HCL space with one dimension collapsed. The collapsed\n  dimension is the luminance for qualitative palettes and the hue for sequential/diverging palettes.\n* `specplot()` also converts the colors to hue/chroma/luminance coordinates but draws\n  the resulting spectrum in a line plot.\n\nFor the qualitative `Dark 3` palette from above the following plots can be obtained.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndemoplot(q4, \"bar\")\nhclplot(q4)\nspecplot(q4, type = \"o\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](colorspace_files/figure-html/allplots-qualitative-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nThe bar plot is used as a typical application for a qualitative palette (in addition to the\ntime series and density plots used above). The other two displays show that luminance\nis (almost) constant in the palette while the hue changes linearly along the color\n\"wheel\". Ideally, chroma would have also been constant to completely balance the colors.\nHowever, at this luminance the maximum chroma differs across hues so that the palette\nis fixed up to use less chroma for the yellow and green elements.\n\nNote also that in a bar plot areas are shaded (and not just points or lines) so that\nlighter colors would be preferable. In the density plot above\nthis was achieved through semi-transparency. Alternatively, luminance could be increased\nas is done in the `\"Pastel 1\"` or `\"Set 3\"` palettes.\n\nSubsequently, the same types of assessment are carried out for the sequential `\"Purples 3\"` palette\nas employed above. \n\n\n::: {.cell}\n\n```{.r .cell-code}\ns9 <- sequential_hcl(9, \"Purples 3\")\ndemoplot(s9, \"heatmap\")\nhclplot(s9)\nspecplot(s9, type = \"o\")\n```\n:::\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](colorspace_files/figure-html/allplots-sequential-1.png){fig-align='center' width=100%}\n:::\n:::\n\n\nHere, a heatmap (based on the well-known Maunga Whau volcano data) is used as a typical\napplication for a sequential palette. The elevation of the volcano is brought out clearly,\nusing dark colors to give emphasis to higher elevations.\n\nThe other two displays show that hue is constant in the palette while luminance and chroma vary.\nLuminance increases monotonically from dark to light (as required for a proper sequential palette).\nChroma is triangular-shaped which allows the viewer to better distinguish the middle colors in the palette\nwhen compared to a monotonic chroma trajectory.\n",
    "supporting": [
      "colorspace_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}